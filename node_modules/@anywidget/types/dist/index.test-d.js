import { describe, expectTypeOf, it } from "vitest";
describe("AnyModel.get", () => {
    it("uses strict types when model is provided", () => {
        expectTypeOf(typedModel.get("value")).toEqualTypeOf();
        expectTypeOf(typedModel.get("name")).toEqualTypeOf();
        // @ts-expect-error - foo is not found on the model
        typedModel.get("foo");
    });
    it("defers to any when model is unknown", () => {
        expectTypeOf(model.get("foo")).toEqualTypeOf();
    });
});
describe("AnyModel.set", () => {
    it("requires strict types when model is provided", () => {
        typedModel.set("value", 42);
        typedModel.set("name", "Ricky Martin");
        // @ts-expect-error - foo is not found on the model
        typedModel.set("foo", "bar");
    });
    it("allows any when model is unknown", () => {
        model.set("foo", "bar");
    });
});
describe("AnyModel.on", () => {
    it("infers custom message payload for untyped Model", async () => {
        model.on("msg:custom", (msg, buffers) => {
            expectTypeOf(msg).toEqualTypeOf();
            expectTypeOf(buffers).toEqualTypeOf();
        });
    });
    it("infers custom message payload for typed Model", async () => {
        typedModel.on("msg:custom", (msg, buffers) => {
            expectTypeOf(msg).toEqualTypeOf();
            expectTypeOf(buffers).toEqualTypeOf();
        });
    });
    it("infers any payload for untyped Model", async () => {
        model.on("change:value", (context, value) => {
            expectTypeOf(context).toEqualTypeOf();
            expectTypeOf(value).toEqualTypeOf();
        });
    });
    it("infers typed payload for typed Model", async () => {
        typedModel.on("change:value", (context, value) => {
            expectTypeOf(context).toEqualTypeOf();
            expectTypeOf(value).toEqualTypeOf();
        });
    });
    it("infers any payload for unknown field of typed Model", async () => {
        typedModel.on("change:foo", (context, value) => {
            expectTypeOf(context).toEqualTypeOf();
            expectTypeOf(value).toEqualTypeOf();
        });
    });
    it("infers any for unknown event", async () => {
        model.on("foo:bar", (...args) => {
            expectTypeOf(args).toEqualTypeOf();
        });
    });
});
describe("Define AnyWidget", () => {
    it("infers initialize and render for static widget", () => {
        let w = {
            initialize({ model }) {
                expectTypeOf(model.get("value")).toEqualTypeOf();
            },
            render({ model, el }) {
                expectTypeOf(el).toEqualTypeOf();
                expectTypeOf(model.get("value")).toEqualTypeOf();
            },
        };
    });
    it("infers initialize and render for function widget", () => {
        let w = () => ({
            initialize({ model }) {
                expectTypeOf(model.get("value")).toEqualTypeOf();
            },
            render({ model, el }) {
                expectTypeOf(el).toEqualTypeOf();
                expectTypeOf(model.get("value")).toEqualTypeOf();
            },
        });
    });
    it("infers initialize and render for async function widget", () => {
        let w = async () => ({
            initialize({ model }) {
                expectTypeOf(model.get("value")).toEqualTypeOf();
            },
            render({ model, el }) {
                expectTypeOf(el).toEqualTypeOf();
                expectTypeOf(model.get("value")).toEqualTypeOf();
            },
        });
    });
});
