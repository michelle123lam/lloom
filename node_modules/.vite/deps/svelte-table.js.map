{
  "version": 3,
  "sources": ["../../svelte-table/src/SvelteTable.svelte"],
  "sourcesContent": ["<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  /** @type {TableColumns<any>} */\n  export let columns;\n\n  /** @type {any[]} */\n  export let rows;\n\n  /** @type { any[] | undefined } rows that pass filter (exposed internal) */\n  export let c_rows = undefined;\n\n  export let sortOrders = [1, -1];\n\n  // READ AND WRITE\n\n  /** @type {string} */\n  export let sortBy = \"\";\n\n  /** @type {number} */\n  export let sortOrder = sortOrders?.[0] || 1;\n\n  /** @type {Object} */\n  export let filterSelections = {};\n\n  // expand\n  /** @type {(string | number)[]} */\n  export let expanded = [];\n\n  // selection\n  /** @type {(string | number)[]} */\n  export let selected = [];\n\n  // READ ONLY\n\n  // TODO: remove in some future release in favour of rowKey\n  /** @type {string | null} */\n  export let expandRowKey = null;\n\n  /** @type {string | null} */\n  export let rowKey = expandRowKey;\n\n  /** @type {Boolean} */\n  export let expandSingle = false;\n\n  /** @type {Boolean} */\n  export let selectSingle = false;\n\n  /** @type {Boolean} */\n  export let selectOnClick = false;\n\n  /** @type {string} */\n  export let iconAsc = \"▲\";\n\n  /** @type {string} */\n  export let iconDesc = \"▼\";\n\n  /** @type {string} */\n  export let iconSortable = \"\";\n\n  /** @type {string} */\n  export let iconExpand = \"▼\";\n\n  /** @type {string} */\n  export let iconExpanded = \"▲\";\n\n  /** @type {boolean} */\n  export let showExpandIcon = false;\n\n  /** @type {string} */\n  export let classNameTable = \"\";\n\n  /** @type {string} */\n  export let classNameThead = \"\";\n\n  /** @type {string} */\n  export let classNameTbody = \"\";\n\n  /** @type {string} */\n  export let classNameSelect = \"\";\n\n  /** @type {string} */\n  export let classNameInput = \"\";\n\n  /** @type {RowClassName<any>} */\n  export let classNameRow = null;\n\n  /** @type {string} */\n  export let classNameCell = \"\";\n\n  /** @type {string | null} class added to the selected row*/\n  export let classNameRowSelected = null;\n\n  /** @type {string | null} class added to the expanded row*/\n  export let classNameRowExpanded = null;\n\n  /** @type {string} class added to the expanded row*/\n  export let classNameExpandedContent = \"\";\n\n  /** @type {string} class added to the cell that allows expanding/closing */\n  export let classNameCellExpand = \"\";\n\n  const dispatch = createEventDispatcher();\n\n  /** @type {function}*/\n  let sortFunction = () => \"\";\n\n  // Validation\n  if (!Array.isArray(expanded)) throw \"'expanded' needs to be an array\";\n  if (!Array.isArray(selected)) throw \"'selection' needs to be an array\";\n  if (expandRowKey !== null) {\n    console.warn(\"'expandRowKey' is deprecated in favour of 'rowKey'\");\n  }\n  if (classNameRowSelected && !rowKey) {\n    console.error(\"'rowKey' is needed to use 'classNameRowSelected'\");\n  }\n\n  let showFilterHeader = columns.some(c => {\n    // check if there are any filter or search headers\n    return (\n      !c.hideFilterHeader &&\n      (c.filterOptions !== undefined || c.searchValue !== undefined)\n    );\n  });\n  let filterValues = {};\n\n  /** @type {Record<string | number | symbol, TableColumn<any>>}*/\n  let columnByKey;\n  $: {\n    columnByKey = {};\n    columns.forEach(col => {\n      columnByKey[col.key] = col;\n    });\n  }\n\n  $: colspan = (showExpandIcon ? 1 : 0) + columns.length;\n\n  $: c_rows = rows\n    .filter(r => {\n      // get search and filter results/matches\n      return Object.keys(filterSelections).every(f => {\n        /**\n         * @type {boolean}\n         * Determine whether search term matches a row.\n         * If the searchValue function has ONE parameter it expects to return a string value\n         *     which will be compared to the search string. This should be depricated in a\n         *     future release, since it's very limiting to search functionality.\n         * If the searchValue function has TWO parameters, pass the row and the search term\n         *     and expect a boolean response.\n         */\n        let resSearch = null;\n\n        if (columnByKey[f] === undefined) {\n          /**\n           * return `true` if the column doesn't exist, any value passed to it is ignored\n           * it effectively ignores the column if it's not defined\n           * this can happen if the column are changing at run-time\n           */\n          return true;\n        } else if (!columnByKey[f]?.searchValue) {\n          // if no searchValue is defined, set to false for filter (resFilter) to handle it\n          resSearch = false;\n        } else if (filterSelections[f] === \"\") {\n          // if searchValue exists and the search string is empty, return true immediately\n          return true;\n        } else if (columnByKey[f].searchValue.length === 1) {\n          // does search comparison using string result\n          // TODO: DEPRECATE\n          resSearch =\n            (columnByKey[f].searchValue(r) + \"\")\n              .toLocaleLowerCase()\n              .indexOf((filterSelections[f] + \"\").toLocaleLowerCase()) >= 0;\n        } else if (columnByKey[f].searchValue.length === 2) {\n          // search using function (with 2 parameters)\n          resSearch = !!columnByKey[f].searchValue(r, filterSelections[f] + \"\");\n        }\n\n        // check filter (dropdown) matches\n        let resFilter =\n          resSearch ||\n          filterSelections[f] === undefined ||\n          // default to value() if filterValue() not provided in col\n          filterSelections[f] ===\n            (typeof columnByKey[f].filterValue === \"function\"\n              ? columnByKey[f].filterValue(r)\n              : columnByKey[f].value(r));\n\n        return resFilter;\n      });\n    })\n    .map(r =>\n      Object.assign({}, r, {\n        // internal row property for sort order\n        $sortOn: sortFunction(r),\n        // internal row property for expanded rows\n        $expanded: rowKey !== null && expanded.indexOf(r[rowKey]) >= 0,\n        $selected: rowKey !== null && selected.indexOf(r[rowKey]) >= 0,\n      })\n    )\n    .sort((a, b) => {\n      if (!sortBy) return 0;\n      else if (a.$sortOn > b.$sortOn) return sortOrder;\n      else if (a.$sortOn < b.$sortOn) return -sortOrder;\n      return 0;\n    });\n\n  const asStringArray = v =>\n    []\n      .concat(v)\n      .filter(v => v !== null && typeof v === \"string\" && v !== \"\")\n      .join(\" \");\n\n  const calculateFilterValues = () => {\n    filterValues = {};\n    columns.forEach(c => {\n      if (typeof c.filterOptions === \"function\") {\n        filterValues[c.key] = c.filterOptions(rows);\n      } else if (Array.isArray(c.filterOptions)) {\n        // if array of strings is provided, use it for name and value\n        filterValues[c.key] = c.filterOptions.map(val => ({\n          name: val,\n          value: val,\n        }));\n      }\n    });\n  };\n\n  $: {\n    let col = columnByKey[sortBy];\n    if (\n      col !== undefined &&\n      col.sortable === true &&\n      typeof col.value === \"function\"\n    ) {\n      sortFunction = r => col.value(r);\n    }\n  }\n\n  $: {\n    // if filters are enabled, watch rows and columns\n    if (showFilterHeader && columns && rows) {\n      calculateFilterValues();\n    }\n  }\n\n  const updateSortOrder = colKey => {\n    return colKey === sortBy\n      ? sortOrders[\n          (sortOrders.findIndex(o => o === sortOrder) + 1) % sortOrders.length\n        ]\n      : sortOrders[0];\n  };\n\n  const handleClickCol = (event, col) => {\n    if (col.sortable) {\n      sortOrder = updateSortOrder(col.key);\n      sortBy = sortOrder ? col.key : undefined;\n    }\n    dispatch(\"clickCol\", { event, col, key: col.key });\n  };\n\n  const handleClickRow = (event, row) => {\n    if (selectOnClick) {\n      if (selectSingle) {\n        // replace selection is default behaviour\n        if (selected.includes(row[rowKey])) {\n          selected = [];\n        } else {\n          selected = [row[rowKey]];\n        }\n      } else {\n        if (selected.includes(row[rowKey])) {\n          selected = selected.filter(r => r != row[rowKey]);\n        } else {\n          selected = [...selected, row[rowKey]].sort();\n        }\n      }\n    }\n    dispatch(\"clickRow\", { event, row });\n  };\n\n  const handleClickExpand = (event, row) => {\n    row.$expanded = !row.$expanded;\n    const keyVal = row[rowKey];\n    if (expandSingle && row.$expanded) {\n      expanded = [keyVal];\n    } else if (expandSingle) {\n      expanded = [];\n    } else if (!row.$expanded) {\n      expanded = expanded.filter(r => r != keyVal);\n    } else {\n      expanded = [...expanded, keyVal];\n    }\n    dispatch(\"clickExpand\", { event, row });\n  };\n\n  const handleClickCell = (event, row, key) => {\n    dispatch(\"clickCell\", { event, row, key });\n  };\n</script>\n\n<table class={asStringArray(classNameTable)}>\n  <thead class={asStringArray(classNameThead)}>\n    {#if showFilterHeader}\n      <tr>\n        {#each columns as col}\n          <th class={asStringArray([col.headerFilterClass])}>\n            {#if !col.hideFilterHeader && col.searchValue !== undefined}\n              <input\n                bind:value={filterSelections[col.key]}\n                class={asStringArray(classNameInput)}\n                placeholder={col.filterPlaceholder}\n              />\n            {:else if !col.hideFilterHeader && filterValues[col.key] !== undefined}\n              <select\n                bind:value={filterSelections[col.key]}\n                class={asStringArray(classNameSelect)}\n              >\n                <option value={undefined}>{col.filterPlaceholder || \"\"}</option>\n                {#each filterValues[col.key] as option}\n                  <option value={option.value}>{option.name}</option>\n                {/each}\n              </select>\n            {/if}\n          </th>\n        {/each}\n        {#if showExpandIcon}\n          <th />\n        {/if}\n      </tr>\n    {/if}\n    <slot name=\"header\" {sortOrder} {sortBy}>\n      <tr>\n        {#each columns as col}\n          <th\n            on:click={e => handleClickCol(e, col)}\n            on:keypress={e => e.key === \"Enter\" && handleClickCol(e, col)}\n            class={asStringArray([\n              col.sortable ? \"isSortable\" : \"\",\n              col.headerClass,\n            ])}\n            tabindex=\"0\"\n          >\n            {col.title}\n            {#if sortBy === col.key}\n              {@html sortOrder === 1 ? iconAsc : iconDesc}\n            {:else if col.sortable}\n              {@html iconSortable}\n            {/if}\n          </th>\n        {/each}\n        {#if showExpandIcon}\n          <th />\n        {/if}\n      </tr>\n    </slot>\n  </thead>\n\n  <tbody class={asStringArray(classNameTbody)}>\n    {#each c_rows as row, n}\n      <slot name=\"row\" {row} {n}>\n        <tr\n          on:click={e => handleClickRow(e, row)}\n          on:keypress={e => e.key === \"Enter\" && handleClickRow(e, row)}\n          class={asStringArray([\n            typeof classNameRow === \"string\" ? classNameRow : null,\n            typeof classNameRow === \"function\" ? classNameRow(row, n) : null,\n            row.$expanded && classNameRowExpanded,\n            row.$selected && classNameRowSelected,\n          ])}\n          tabIndex={selectOnClick ? \"0\" : null}\n        >\n          {#each columns as col, colIndex}\n            <td\n              on:click={e => handleClickCell(e, row, col.key)}\n              on:keypress={e =>\n                e.key === \"Enter\" && handleClickCell(e, row, col.key)}\n              class={asStringArray([\n                typeof col.class === \"string\" ? col.class : null,\n                typeof col.class === \"function\"\n                  ? col.class(row, n, colIndex)\n                  : null,\n                classNameCell,\n              ])}\n            >\n              {#if col.renderComponent}\n                <svelte:component\n                  this={col.renderComponent.component || col.renderComponent}\n                  {...col.renderComponent.props || {}}\n                  {row}\n                  {col}\n                />\n              {:else if col.parseHTML}\n                {@html col.renderValue\n                  ? col.renderValue(row, n, colIndex)\n                  : col.value(row, n, colIndex)}\n              {:else}\n                {col.renderValue\n                  ? col.renderValue(row, n, colIndex)\n                  : col.value(row, n, colIndex)}\n              {/if}\n            </td>\n          {/each}\n          {#if showExpandIcon}\n            <td class={asStringArray(classNameCellExpand)}>\n              <span\n                class=\"isClickable\"\n                on:click={e => handleClickExpand(e, row)}\n                on:keypress={e =>\n                  e.key === \"Enter\" && handleClickExpand(e, row)}\n                tabindex=\"0\"\n                role=\"button\"\n              >\n                {@html row.$expanded ? iconExpand : iconExpanded}\n              </span>\n            </td>\n          {/if}\n        </tr>\n        {#if row.$expanded}\n          <tr class={asStringArray(classNameExpandedContent)}\n            ><td {colspan}>\n              <slot name=\"expanded\" {row} {n} />\n            </td></tr\n          >\n        {/if}\n      </slot>\n    {/each}\n  </tbody>\n</table>\n\n<style>\n  table {\n    width: 100%;\n  }\n  .isSortable {\n    cursor: pointer;\n  }\n\n  .isClickable {\n    cursor: pointer;\n  }\n\n  tr th select {\n    width: 100%;\n  }\n</style>\n"],
  "mappings": "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",
  "names": ["ctx", "v"]
}
