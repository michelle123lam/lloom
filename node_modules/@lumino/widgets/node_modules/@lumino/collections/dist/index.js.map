{"version":3,"file":"index.js","sources":["../src/linkedlist.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IRetroable } from '@lumino/algorithm';\n\n/**\n * A generic doubly-linked list.\n */\nexport class LinkedList<T> implements Iterable<T>, IRetroable<T> {\n  /**\n   * Whether the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get isEmpty(): boolean {\n    return this._size === 0;\n  }\n\n  /**\n   * The size of the list.\n   *\n   * #### Complexity\n   * `O(1)`\n   *\n   * #### Notes\n   * This is equivalent to `length`.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * The length of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `size`.\n   *\n   * This property is deprecated.\n   */\n  get length(): number {\n    return this._size;\n  }\n\n  /**\n   * The first value in the list.\n   *\n   * This is `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get first(): T | undefined {\n    return this._first ? this._first.value : undefined;\n  }\n\n  /**\n   * The last value in the list.\n   *\n   * This is `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get last(): T | undefined {\n    return this._last ? this._last.value : undefined;\n  }\n\n  /**\n   * The first node in the list.\n   *\n   * This is `null` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get firstNode(): LinkedList.INode<T> | null {\n    return this._first;\n  }\n\n  /**\n   * The last node in the list.\n   *\n   * This is `null` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get lastNode(): LinkedList.INode<T> | null {\n    return this._last;\n  }\n\n  /**\n   * Create an iterator over the values in the list.\n   *\n   * @returns A new iterator starting with the first value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  *[Symbol.iterator](): IterableIterator<T> {\n    let node = this._first;\n    while (node) {\n      yield node.value;\n      node = node.next;\n    }\n  }\n\n  /**\n   * Create a reverse iterator over the values in the list.\n   *\n   * @returns A new iterator starting with the last value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  *retro(): IterableIterator<T> {\n    let node = this._last;\n    while (node) {\n      yield node.value;\n      node = node.prev;\n    }\n  }\n\n  /**\n   * Create an iterator over the nodes in the list.\n   *\n   * @returns A new iterator starting with the first node.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  *nodes(): IterableIterator<LinkedList.INode<T>> {\n    let node = this._first;\n    while (node) {\n      yield node;\n      node = node.next;\n    }\n  }\n\n  /**\n   * Create a reverse iterator over the nodes in the list.\n   *\n   * @returns A new iterator starting with the last node.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  *retroNodes(): IterableIterator<LinkedList.INode<T>> {\n    let node = this._last;\n    while (node) {\n      yield node;\n      node = node.prev;\n    }\n  }\n\n  /**\n   * Assign new values to the list, replacing all current values.\n   *\n   * @param values - The values to assign to the list.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  assign(values: Iterable<T>): void {\n    this.clear();\n    for (const value of values) {\n      this.addLast(value);\n    }\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `addLast`.\n   */\n  push(value: T): void {\n    this.addLast(value);\n  }\n\n  /**\n   * Remove and return the value at the end of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `removeLast`.\n   */\n  pop(): T | undefined {\n    return this.removeLast();\n  }\n\n  /**\n   * Add a value to the beginning of the list.\n   *\n   * @param value - The value to add to the beginning of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `addFirst`.\n   */\n  shift(value: T): void {\n    this.addFirst(value);\n  }\n\n  /**\n   * Remove and return the value at the beginning of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `removeFirst`.\n   */\n  unshift(): T | undefined {\n    return this.removeFirst();\n  }\n\n  /**\n   * Add a value to the beginning of the list.\n   *\n   * @param value - The value to add to the beginning of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  addFirst(value: T): LinkedList.INode<T> {\n    let node = new Private.LinkedListNode<T>(this, value);\n    if (!this._first) {\n      this._first = node;\n      this._last = node;\n    } else {\n      node.next = this._first;\n      this._first.prev = node;\n      this._first = node;\n    }\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  addLast(value: T): LinkedList.INode<T> {\n    let node = new Private.LinkedListNode<T>(this, value);\n    if (!this._last) {\n      this._first = node;\n      this._last = node;\n    } else {\n      node.prev = this._last;\n      this._last.next = node;\n      this._last = node;\n    }\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Insert a value before a specific node in the list.\n   *\n   * @param value - The value to insert before the reference node.\n   *\n   * @param ref - The reference node of interest. If this is `null`,\n   *   the value will be added to the beginning of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Notes\n   * The reference node must be owned by the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  insertBefore(value: T, ref: LinkedList.INode<T> | null): LinkedList.INode<T> {\n    if (!ref || ref === this._first) {\n      return this.addFirst(value);\n    }\n    if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\n      throw new Error('Reference node is not owned by the list.');\n    }\n    let node = new Private.LinkedListNode<T>(this, value);\n    let _ref = ref as Private.LinkedListNode<T>;\n    let prev = _ref.prev!;\n    node.next = _ref;\n    node.prev = prev;\n    _ref.prev = node;\n    prev.next = node;\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Insert a value after a specific node in the list.\n   *\n   * @param value - The value to insert after the reference node.\n   *\n   * @param ref - The reference node of interest. If this is `null`,\n   *   the value will be added to the end of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Notes\n   * The reference node must be owned by the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  insertAfter(value: T, ref: LinkedList.INode<T> | null): LinkedList.INode<T> {\n    if (!ref || ref === this._last) {\n      return this.addLast(value);\n    }\n    if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\n      throw new Error('Reference node is not owned by the list.');\n    }\n    let node = new Private.LinkedListNode<T>(this, value);\n    let _ref = ref as Private.LinkedListNode<T>;\n    let next = _ref.next!;\n    node.next = next;\n    node.prev = _ref;\n    _ref.next = node;\n    next.prev = node;\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Remove and return the value at the beginning of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  removeFirst(): T | undefined {\n    let node = this._first;\n    if (!node) {\n      return undefined;\n    }\n    if (node === this._last) {\n      this._first = null;\n      this._last = null;\n    } else {\n      this._first = node.next;\n      this._first!.prev = null;\n    }\n    node.list = null;\n    node.next = null;\n    node.prev = null;\n    this._size--;\n    return node.value;\n  }\n\n  /**\n   * Remove and return the value at the end of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  removeLast(): T | undefined {\n    let node = this._last;\n    if (!node) {\n      return undefined;\n    }\n    if (node === this._first) {\n      this._first = null;\n      this._last = null;\n    } else {\n      this._last = node.prev;\n      this._last!.next = null;\n    }\n    node.list = null;\n    node.next = null;\n    node.prev = null;\n    this._size--;\n    return node.value;\n  }\n\n  /**\n   * Remove a specific node from the list.\n   *\n   * @param node - The node to remove from the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * The node must be owned by the list.\n   */\n  removeNode(node: LinkedList.INode<T>): void {\n    if (!(node instanceof Private.LinkedListNode) || node.list !== this) {\n      throw new Error('Node is not owned by the list.');\n    }\n    let _node = node as Private.LinkedListNode<T>;\n    if (_node === this._first && _node === this._last) {\n      this._first = null;\n      this._last = null;\n    } else if (_node === this._first) {\n      this._first = _node.next;\n      this._first!.prev = null;\n    } else if (_node === this._last) {\n      this._last = _node.prev;\n      this._last!.next = null;\n    } else {\n      _node.next!.prev = _node.prev;\n      _node.prev!.next = _node.next;\n    }\n    _node.list = null;\n    _node.next = null;\n    _node.prev = null;\n    this._size--;\n  }\n\n  /**\n   * Remove all values from the list.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  clear(): void {\n    let node = this._first;\n    while (node) {\n      let next = node.next;\n      node.list = null;\n      node.prev = null;\n      node.next = null;\n      node = next;\n    }\n    this._first = null;\n    this._last = null;\n    this._size = 0;\n  }\n\n  private _first: Private.LinkedListNode<T> | null = null;\n  private _last: Private.LinkedListNode<T> | null = null;\n  private _size = 0;\n}\n\n/**\n * The namespace for the `LinkedList` class statics.\n */\nexport namespace LinkedList {\n  /**\n   * An object which represents a node in a linked list.\n   *\n   * #### Notes\n   * User code will not create linked list nodes directly. Nodes\n   * are created automatically when values are added to a list.\n   */\n  export interface INode<T> {\n    /**\n     * The linked list which created and owns the node.\n     *\n     * This will be `null` when the node is removed from the list.\n     */\n    readonly list: LinkedList<T> | null;\n\n    /**\n     * The next node in the list.\n     *\n     * This will be `null` when the node is the last node in the list\n     * or when the node is removed from the list.\n     */\n    readonly next: INode<T> | null;\n\n    /**\n     * The previous node in the list.\n     *\n     * This will be `null` when the node is the first node in the list\n     * or when the node is removed from the list.\n     */\n    readonly prev: INode<T> | null;\n\n    /**\n     * The user value stored in the node.\n     */\n    readonly value: T;\n  }\n\n  /**\n   * Create a linked list from an iterable of values.\n   *\n   * @param values - The iterable object of interest.\n   *\n   * @returns A new linked list initialized with the given values.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  export function from<T>(values: Iterable<T>): LinkedList<T> {\n    let list = new LinkedList<T>();\n    list.assign(values);\n    return list;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The internal linked list node implementation.\n   */\n  export class LinkedListNode<T> {\n    /**\n     * The linked list which created and owns the node.\n     */\n    list: LinkedList<T> | null = null;\n\n    /**\n     * The next node in the list.\n     */\n    next: LinkedListNode<T> | null = null;\n\n    /**\n     * The previous node in the list.\n     */\n    prev: LinkedListNode<T> | null = null;\n\n    /**\n     * The user value stored in the node.\n     */\n    readonly value: T;\n\n    /**\n     * Construct a new linked list node.\n     *\n     * @param list - The list which owns the node.\n     *\n     * @param value - The value for the link.\n     */\n    constructor(list: LinkedList<T>, value: T) {\n      this.list = list;\n      this.value = value;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}