{"version":3,"names":["CommandRegistry","constructor","this","_timerID","_replaying","_keystrokes","_keydownEvents","_keyBindings","_exactKeyMatch","_commands","Map","_commandChanged","Signal","_commandExecuted","_keyBindingChanged","_holdKeyBindingPromises","commandChanged","commandExecuted","keyBindingChanged","keyBindings","listCommands","Array","from","keys","hasCommand","id","has","addCommand","options","Error","set","Private","createCommand","emit","type","DisposableDelegate","delete","notifyCommandChanged","undefined","describedBy","args","JSONExt","emptyObject","cmd","get","Promise","resolve","_a","call","label","mnemonic","icon","iconClass","iconLabel","caption","usage","className","dataset","isEnabled","isToggled","isToggleable","isVisible","execute","value","reject","err","result","addKeyBinding","binding","createKeyBinding","push","ArrayExt","removeFirstOf","processKeydownEvent","event","defaultPrevented","isModifierKeyPressed","keystroke","keystrokeForKeydownEvent","_replayKeydownEvents","_clearPendingState","exact","partial","matchKeyBinding","hasPartial","length","preventDefault","some","match","stopPropagation","_executeKeyBinding","_startTimer","holdKeyBindingExecution","permission","_clearTimer","window","setTimeout","_onPendingTimeout","CHORD_TIMEOUT","clearTimeout","forEach","replayKeyEvent","async","size","keydownEvents","executionAllowed","race","all","map","KEYBINDING_HOLD_TIMEOUT","every","Boolean","clear","command","newArgs","_luminoEvent","word","msg1","join","msg2","console","warn","parseKeystroke","key","alt","ctrl","shift","token","split","Platform","IS_MAC","normalizeKeystroke","mods","parts","normalizeKeys","IS_WIN","winKeys","macKeys","linuxKeys","formatKeystroke","formatSingleKey","separator","formatKey","layout","getKeyboardLayout","keyForKeydownEvent","isModifierKey","ctrlKey","altKey","shiftKey","metaKey","asFunc","emptyStringFunc","negativeOneFunc","undefinedFunc","emptyDatasetFunc","trueFunc","falseFunc","selector","validateSelector","bindings","distance","Infinity","specificity","i","n","sqm","matchSequence","targetDistance","td","sp","Selector","calculateSpecificity","target","dispatchEvent","clone","document","createEvent","bubbles","cancelable","initEvent","keyCode","which","view","cloneKeyboardEvent","MAC_DISPLAY","hasOwnProperty","WIN_DISPLAY","Backspace","Tab","Enter","Shift","Ctrl","Alt","Escape","PageUp","PageDown","End","Home","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Delete","Cmd","dfault","indexOf","isValid","bindKeys","userKeys","targ","curr","currentTarget","dist","parentElement","hasAttribute","matches"],"sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module commands\n */\nimport { ArrayExt } from '@lumino/algorithm';\n\nimport {\n  JSONExt,\n  ReadonlyJSONObject,\n  ReadonlyPartialJSONObject\n} from '@lumino/coreutils';\n\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\n\nimport { Platform, Selector } from '@lumino/domutils';\n\nimport { getKeyboardLayout } from '@lumino/keyboard';\n\nimport { ISignal, Signal } from '@lumino/signaling';\n\nimport { VirtualElement } from '@lumino/virtualdom';\n\n/**\n * An object which manages a collection of commands.\n *\n * #### Notes\n * A command registry can be used to populate a variety of action-based\n * widgets, such as command palettes, menus, and toolbars.\n */\nexport class CommandRegistry {\n  /**\n   * A signal emitted when a command has changed.\n   *\n   * #### Notes\n   * This signal is useful for visual representations of commands which\n   * need to refresh when the state of a relevant command has changed.\n   */\n  get commandChanged(): ISignal<this, CommandRegistry.ICommandChangedArgs> {\n    return this._commandChanged;\n  }\n\n  /**\n   * A signal emitted when a command has executed.\n   *\n   * #### Notes\n   * Care should be taken when consuming this signal. The command system is used\n   * by many components for many user actions. Handlers registered with this\n   * signal must return quickly to ensure the overall application remains responsive.\n   */\n  get commandExecuted(): ISignal<this, CommandRegistry.ICommandExecutedArgs> {\n    return this._commandExecuted;\n  }\n\n  /**\n   * A signal emitted when a key binding is changed.\n   */\n  get keyBindingChanged(): ISignal<\n    this,\n    CommandRegistry.IKeyBindingChangedArgs\n  > {\n    return this._keyBindingChanged;\n  }\n\n  /**\n   * A read-only array of the key bindings in the registry.\n   */\n  get keyBindings(): ReadonlyArray<CommandRegistry.IKeyBinding> {\n    return this._keyBindings;\n  }\n\n  /**\n   * List the ids of the registered commands.\n   *\n   * @returns A new array of the registered command ids.\n   */\n  listCommands(): string[] {\n    return Array.from(this._commands.keys());\n  }\n\n  /**\n   * Test whether a specific command is registered.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @returns `true` if the command is registered, `false` otherwise.\n   */\n  hasCommand(id: string): boolean {\n    return this._commands.has(id);\n  }\n\n  /**\n   * Add a command to the registry.\n   *\n   * @param id - The unique id of the command.\n   *\n   * @param options - The options for the command.\n   *\n   * @returns A disposable which will remove the command.\n   *\n   * @throws An error if the given `id` is already registered.\n   */\n  addCommand(\n    id: string,\n    options: CommandRegistry.ICommandOptions\n  ): IDisposable {\n    // Throw an error if the id is already registered.\n    if (this._commands.has(id)) {\n      throw new Error(`Command '${id}' already registered.`);\n    }\n\n    // Add the command to the registry.\n    this._commands.set(id, Private.createCommand(options));\n\n    // Emit the `commandChanged` signal.\n    this._commandChanged.emit({ id, type: 'added' });\n\n    // Return a disposable which will remove the command.\n    return new DisposableDelegate(() => {\n      // Remove the command from the registry.\n      this._commands.delete(id);\n\n      // Emit the `commandChanged` signal.\n      this._commandChanged.emit({ id, type: 'removed' });\n    });\n  }\n\n  /**\n   * Notify listeners that the state of a command has changed.\n   *\n   * @param id - The id of the command which has changed. If more than\n   *   one command has changed, this argument should be omitted.\n   *\n   * @throws An error if the given `id` is not registered.\n   *\n   * #### Notes\n   * This method should be called by the command author whenever the\n   * application state changes such that the results of the command\n   * metadata functions may have changed.\n   *\n   * This will cause the `commandChanged` signal to be emitted.\n   */\n  notifyCommandChanged(id?: string): void {\n    if (id !== undefined && !this._commands.has(id)) {\n      throw new Error(`Command '${id}' is not registered.`);\n    }\n    this._commandChanged.emit({ id, type: id ? 'changed' : 'many-changed' });\n  }\n\n  /**\n   * Get the description for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The description for the command.\n   */\n  describedBy(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): Promise<CommandRegistry.Description> {\n    let cmd = this._commands.get(id);\n    return Promise.resolve(\n      cmd?.describedBy.call(undefined, args) ?? { args: null }\n    );\n  }\n\n  /**\n   * Get the display label for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The display label for the command, or an empty string\n   *   if the command is not registered.\n   */\n  label(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands.get(id);\n    return cmd?.label.call(undefined, args) ?? '';\n  }\n\n  /**\n   * Get the mnemonic index for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The mnemonic index for the command, or `-1` if the\n   *   command is not registered.\n   */\n  mnemonic(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): number {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.mnemonic.call(undefined, args) : -1;\n  }\n\n  /**\n   * Get the icon renderer for a specific command.\n   *\n   * DEPRECATED: if set to a string value, the .icon field will\n   * function as an alias for the .iconClass field, for backwards\n   * compatibility. In the future when this is removed, the default\n   * return type will become undefined.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The icon renderer for the command or `undefined`.\n   */\n  icon(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): VirtualElement.IRenderer | undefined {\n    return this._commands.get(id)?.icon.call(undefined, args);\n  }\n\n  /**\n   * Get the icon class for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The icon class for the command, or an empty string if\n   *   the command is not registered.\n   */\n  iconClass(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.iconClass.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the icon label for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The icon label for the command, or an empty string if\n   *   the command is not registered.\n   */\n  iconLabel(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.iconLabel.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the short form caption for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The caption for the command, or an empty string if the\n   *   command is not registered.\n   */\n  caption(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.caption.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the usage help text for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The usage text for the command, or an empty string if\n   *   the command is not registered.\n   */\n  usage(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.usage.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the extra class name for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The class name for the command, or an empty string if\n   *   the command is not registered.\n   */\n  className(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): string {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.className.call(undefined, args) : '';\n  }\n\n  /**\n   * Get the dataset for a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns The dataset for the command, or an empty dataset if\n   *   the command is not registered.\n   */\n  dataset(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): CommandRegistry.Dataset {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.dataset.call(undefined, args) : {};\n  }\n\n  /**\n   * Test whether a specific command is enabled.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A boolean indicating whether the command is enabled,\n   *   or `false` if the command is not registered.\n   */\n  isEnabled(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): boolean {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.isEnabled.call(undefined, args) : false;\n  }\n\n  /**\n   * Test whether a specific command is toggled.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A boolean indicating whether the command is toggled,\n   *   or `false` if the command is not registered.\n   */\n  isToggled(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): boolean {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.isToggled.call(undefined, args) : false;\n  }\n\n  /**\n   * Test whether a specific command is toggleable.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A boolean indicating whether the command is toggleable,\n   *   or `false` if the command is not registered.\n   */\n  isToggleable(\n    id: string,\n    args: ReadonlyJSONObject = JSONExt.emptyObject\n  ): boolean {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.isToggleable : false;\n  }\n\n  /**\n   * Test whether a specific command is visible.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A boolean indicating whether the command is visible,\n   *   or `false` if the command is not registered.\n   */\n  isVisible(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): boolean {\n    let cmd = this._commands.get(id);\n    return cmd ? cmd.isVisible.call(undefined, args) : false;\n  }\n\n  /**\n   * Execute a specific command.\n   *\n   * @param id - The id of the command of interest.\n   *\n   * @param args - The arguments for the command.\n   *\n   * @returns A promise which resolves with the result of the command.\n   *\n   * #### Notes\n   * The promise will reject if the command throws an exception,\n   * or if the command is not registered.\n   */\n  execute(\n    id: string,\n    args: ReadonlyPartialJSONObject = JSONExt.emptyObject\n  ): Promise<any> {\n    // Reject if the command is not registered.\n    let cmd = this._commands.get(id);\n    if (!cmd) {\n      return Promise.reject(new Error(`Command '${id}' not registered.`));\n    }\n\n    // Execute the command and reject if an exception is thrown.\n    let value: any;\n    try {\n      value = cmd.execute.call(undefined, args);\n    } catch (err) {\n      value = Promise.reject(err);\n    }\n\n    // Create the return promise which resolves the result.\n    let result = Promise.resolve(value);\n\n    // Emit the command executed signal.\n    this._commandExecuted.emit({ id, args, result });\n\n    // Return the result promise to the caller.\n    return result;\n  }\n\n  /**\n   * Add a key binding to the registry.\n   *\n   * @param options - The options for creating the key binding.\n   *\n   * @returns A disposable which removes the added key binding.\n   *\n   * #### Notes\n   * If multiple key bindings are registered for the same sequence, the\n   * binding with the highest selector specificity is executed first. A\n   * tie is broken by using the most recently added key binding.\n   *\n   * Ambiguous key bindings are resolved with a timeout. As an example,\n   * suppose two key bindings are registered: one with the key sequence\n   * `['Ctrl D']`, and another with `['Ctrl D', 'Ctrl W']`. If the user\n   * presses `Ctrl D`, the first binding cannot be immediately executed\n   * since the user may intend to complete the chord with `Ctrl W`. For\n   * such cases, a timer is used to allow the chord to be completed. If\n   * the chord is not completed before the timeout, the first binding\n   * is executed.\n   */\n  addKeyBinding(options: CommandRegistry.IKeyBindingOptions): IDisposable {\n    // Create the binding for the given options.\n    let binding = Private.createKeyBinding(options);\n\n    // Add the key binding to the bindings array.\n    this._keyBindings.push(binding);\n\n    // Emit the `bindingChanged` signal.\n    this._keyBindingChanged.emit({ binding, type: 'added' });\n\n    // Return a disposable which will remove the binding.\n    return new DisposableDelegate(() => {\n      // Remove the binding from the array.\n      ArrayExt.removeFirstOf(this._keyBindings, binding);\n\n      // Emit the `bindingChanged` signal.\n      this._keyBindingChanged.emit({ binding, type: 'removed' });\n    });\n  }\n\n  /**\n   * Process a `'keydown'` event and invoke a matching key binding.\n   *\n   * @param event - The event object for a `'keydown'` event.\n   *\n   * #### Notes\n   * This should be called in response to a `'keydown'` event in order\n   * to invoke the command for the best matching key binding.\n   *\n   * The registry **does not** install its own listener for `'keydown'`\n   * events. This allows the application full control over the nodes\n   * and phase for which the registry processes `'keydown'` events.\n   *\n   * When the keydown event is processed, if the event target or any of its\n   * ancestor nodes has a `data-lm-suppress-shortcuts` attribute, its keydown\n   * events will not invoke commands.\n   */\n  processKeydownEvent(event: KeyboardEvent): void {\n    // Bail immediately if playing back keystrokes\n    // or if the event has been processed\n    if (\n      event.defaultPrevented ||\n      this._replaying ||\n      CommandRegistry.isModifierKeyPressed(event)\n    ) {\n      return;\n    }\n\n    // Get the normalized keystroke for the event.\n    const keystroke = CommandRegistry.keystrokeForKeydownEvent(event);\n\n    // If the keystroke is not valid for the keyboard layout, replay\n    // any suppressed events and clear the pending state.\n    if (!keystroke) {\n      this._replayKeydownEvents();\n      this._clearPendingState();\n      return;\n    }\n\n    // Add the keystroke to the current key sequence.\n    this._keystrokes.push(keystroke);\n\n    // Find the exact and partial matches for the key sequence.\n    const { exact, partial } = Private.matchKeyBinding(\n      this._keyBindings,\n      this._keystrokes,\n      event\n    );\n    // Whether there is any partial match.\n    const hasPartial = partial.length !== 0;\n\n    // If there is no exact match and no partial match, replay\n    // any suppressed events and clear the pending state.\n    if (!exact && !hasPartial) {\n      this._replayKeydownEvents();\n      this._clearPendingState();\n      return;\n    }\n\n    // Stop propagation of the event. If there is only a partial match,\n    // the event will be replayed if a final exact match never occurs.\n    if (exact?.preventDefault || partial.some(match => match.preventDefault)) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    // Store the event for possible playback in the future and for\n    // the use in execution hold check.\n    this._keydownEvents.push(event);\n\n    // If there is an exact match but no partial match, the exact match\n    // can be dispatched immediately. The pending state is cleared so\n    // the next key press starts from the default state.\n    if (exact && !hasPartial) {\n      this._executeKeyBinding(exact);\n      this._clearPendingState();\n      return;\n    }\n\n    // If there is both an exact match and a partial match, the exact\n    // match is stored for future dispatch in case the timer expires\n    // before a more specific match is triggered.\n    if (exact) {\n      this._exactKeyMatch = exact;\n    }\n\n    // (Re)start the timer to dispatch the most recent exact match\n    // in case the partial match fails to result in an exact match.\n    this._startTimer();\n  }\n\n  /**\n   * Delay the execution of any command matched against the given 'keydown' event\n   * until the `permission` to execute is granted.\n   *\n   * @param event - The event object for a `'keydown'` event.\n   * @param permission - The promise with value indicating whether to proceed with the execution.\n   *\n   * ### Note\n   * This enables the caller of `processKeydownEvent` to asynchronously prevent the\n   * execution of the command based on external events.\n   */\n  holdKeyBindingExecution(event: KeyboardEvent, permission: Promise<boolean>) {\n    this._holdKeyBindingPromises.set(event, permission);\n  }\n\n  /**\n   * Start or restart the pending timeout.\n   */\n  private _startTimer(): void {\n    this._clearTimer();\n    this._timerID = window.setTimeout(() => {\n      this._onPendingTimeout();\n    }, Private.CHORD_TIMEOUT);\n  }\n\n  /**\n   * Clear the pending timeout.\n   */\n  private _clearTimer(): void {\n    if (this._timerID !== 0) {\n      clearTimeout(this._timerID);\n      this._timerID = 0;\n    }\n  }\n\n  /**\n   * Replay the keydown events which were suppressed.\n   */\n  private _replayKeydownEvents(): void {\n    if (this._keydownEvents.length === 0) {\n      return;\n    }\n    this._replaying = true;\n    this._keydownEvents.forEach(Private.replayKeyEvent);\n    this._replaying = false;\n  }\n\n  /**\n   * Execute the command for the given key binding.\n   *\n   * If the command is missing or disabled, a warning will be logged.\n   *\n   * The execution will not proceed if any of the events leading to\n   * the keybinding matching were held with the permission resolving to false.\n   */\n  private async _executeKeyBinding(\n    binding: CommandRegistry.IKeyBinding\n  ): Promise<void> {\n    if (this._holdKeyBindingPromises.size !== 0) {\n      // Copy keydown events list to ensure it is available in async code.\n      const keydownEvents = [...this._keydownEvents];\n      // Wait until all hold requests on execution are lifted.\n      const executionAllowed = (\n        await Promise.race([\n          Promise.all(\n            keydownEvents.map(\n              async event =>\n                this._holdKeyBindingPromises.get(event) ?? Promise.resolve(true)\n            )\n          ),\n          new Promise<boolean[]>(resolve => {\n            setTimeout(() => resolve([false]), Private.KEYBINDING_HOLD_TIMEOUT);\n          })\n        ])\n      ).every(Boolean);\n      // Clear the hold requests.\n      this._holdKeyBindingPromises.clear();\n      // Do not proceed with the execution if any of the hold requests did not get the permission to proceed.\n      if (!executionAllowed) {\n        return;\n      }\n    }\n\n    let { command, args } = binding;\n    let newArgs: ReadonlyPartialJSONObject = {\n      _luminoEvent: { type: 'keybinding', keys: binding.keys },\n      ...args\n    };\n    if (!this.hasCommand(command) || !this.isEnabled(command, newArgs)) {\n      let word = this.hasCommand(command) ? 'enabled' : 'registered';\n      let keys = binding.keys.join(', ');\n      let msg1 = `Cannot execute key binding '${keys}':`;\n      let msg2 = `command '${command}' is not ${word}.`;\n      console.warn(`${msg1} ${msg2}`);\n      return;\n    }\n    await this.execute(command, newArgs);\n  }\n\n  /**\n   * Clear the internal pending state.\n   */\n  private _clearPendingState(): void {\n    this._clearTimer();\n    this._exactKeyMatch = null;\n    this._keystrokes.length = 0;\n    this._keydownEvents.length = 0;\n  }\n\n  /**\n   * Handle the partial match timeout.\n   */\n  private _onPendingTimeout(): void {\n    this._timerID = 0;\n    if (this._exactKeyMatch) {\n      this._executeKeyBinding(this._exactKeyMatch);\n    } else {\n      this._replayKeydownEvents();\n    }\n    this._clearPendingState();\n  }\n\n  private _timerID = 0;\n  private _replaying = false;\n  private _keystrokes: string[] = [];\n  private _keydownEvents: KeyboardEvent[] = [];\n  private _keyBindings: CommandRegistry.IKeyBinding[] = [];\n  private _exactKeyMatch: CommandRegistry.IKeyBinding | null = null;\n  private _commands = new Map<string, Private.ICommand>();\n  private _commandChanged = new Signal<\n    this,\n    CommandRegistry.ICommandChangedArgs\n  >(this);\n  private _commandExecuted = new Signal<\n    this,\n    CommandRegistry.ICommandExecutedArgs\n  >(this);\n  private _keyBindingChanged = new Signal<\n    this,\n    CommandRegistry.IKeyBindingChangedArgs\n  >(this);\n  private _holdKeyBindingPromises = new Map<KeyboardEvent, Promise<boolean>>();\n}\n\n/**\n * The namespace for the `CommandRegistry` class statics.\n */\nexport namespace CommandRegistry {\n  /**\n   * A type alias for a user-defined command function.\n   */\n  export type CommandFunc<T> = (args: ReadonlyPartialJSONObject) => T;\n\n  /**\n   * A type alias for a simple immutable string dataset.\n   */\n  export type Dataset = { readonly [key: string]: string };\n\n  /**\n   * Commands description.\n   */\n  export type Description = { args: ReadonlyJSONObject | null };\n\n  /**\n   * An options object for creating a command.\n   *\n   * #### Notes\n   * A command is an abstract representation of code to be executed along\n   * with metadata for describing how the command should be displayed in\n   * a visual representation.\n   *\n   * A command is a collection of functions, *not* methods. The command\n   * registry will always invoke the command functions with a `thisArg`\n   * which is `undefined`.\n   */\n  export interface ICommandOptions {\n    /**\n     * The function to invoke when the command is executed.\n     *\n     * #### Notes\n     * This should return the result of the command (if applicable) or\n     * a promise which yields the result. The result is resolved as a\n     * promise and that promise is returned to the code which executed\n     * the command.\n     *\n     * This may be invoked even when `isEnabled` returns `false`.\n     *\n     * If called via a keybinding the passed args will include a `_luminoEvent` that specify the event type and keys pressed for customization.\n     */\n    execute: CommandFunc<any | Promise<any>>;\n\n    /**\n     * JSON Schemas describing the command.\n     *\n     * #### Notes\n     * For now, the command arguments are the only one that can be\n     * described.\n     */\n    describedBy?:\n      | Partial<Description>\n      | CommandFunc<Partial<Description> | Promise<Partial<Description>>>;\n\n    /**\n     * The label for the command.\n     *\n     * #### Notes\n     * This can be a string literal, or a function which returns the\n     * label based on the provided command arguments.\n     *\n     * The label is often used as the primary text for the command.\n     *\n     * The default value is an empty string.\n     */\n    label?: string | CommandFunc<string>;\n\n    /**\n     * The index of the mnemonic character in the command's label.\n     *\n     * #### Notes\n     * This can be an index literal, or a function which returns the\n     * mnemonic index based on the provided command arguments.\n     *\n     * The mnemonic character is often used by menus to provide easy\n     * single-key keyboard access for triggering a menu item. It is\n     * typically rendered as an underlined character in the label.\n     *\n     * The default value is `-1`.\n     */\n    mnemonic?: number | CommandFunc<number>;\n\n    /**\n     * The icon renderer for the command.\n     *\n     * #### Notes\n     * This can be an IRenderer object, or a function which returns the\n     * renderer based on the provided command arguments.\n     *\n     * The default value is `undefined`.\n     */\n    icon?:\n      | VirtualElement.IRenderer\n      | undefined\n      | CommandFunc<VirtualElement.IRenderer | undefined>;\n\n    /**\n     * The icon class for the command.\n     *\n     * #### Notes\n     * This class name will be added to the icon node for the visual\n     * representation of the command.\n     *\n     * Multiple class names can be separated with white space.\n     *\n     * This can be a string literal, or a function which returns the\n     * icon based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    iconClass?: string | CommandFunc<string>;\n\n    /**\n     * The icon label for the command.\n     *\n     * #### Notes\n     * This label will be added as text to the icon node for the visual\n     * representation of the command.\n     *\n     * This can be a string literal, or a function which returns the\n     * label based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    iconLabel?: string | CommandFunc<string>;\n\n    /**\n     * The caption for the command.\n     *\n     * #### Notes\n     * This should be a simple one line description of the command. It\n     * is used by some visual representations to show quick info about\n     * the command.\n     *\n     * This can be a string literal, or a function which returns the\n     * caption based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    caption?: string | CommandFunc<string>;\n\n    /**\n     * The usage text for the command.\n     *\n     * #### Notes\n     * This should be a full description of the command, which includes\n     * information about the structure of the arguments and the type of\n     * the return value. It is used by some visual representations when\n     * displaying complete help info about the command.\n     *\n     * This can be a string literal, or a function which returns the\n     * usage text based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    usage?: string | CommandFunc<string>;\n\n    /**\n     * The general class name for the command.\n     *\n     * #### Notes\n     * This class name will be added to the primary node for the visual\n     * representation of the command.\n     *\n     * Multiple class names can be separated with white space.\n     *\n     * This can be a string literal, or a function which returns the\n     * class name based on the provided command arguments.\n     *\n     * The default value is an empty string.\n     */\n    className?: string | CommandFunc<string>;\n\n    /**\n     * The dataset for the command.\n     *\n     * #### Notes\n     * The dataset values will be added to the primary node for the\n     * visual representation of the command.\n     *\n     * This can be a dataset object, or a function which returns the\n     * dataset object based on the provided command arguments.\n     *\n     * The default value is an empty dataset.\n     */\n    dataset?: Dataset | CommandFunc<Dataset>;\n\n    /**\n     * A function which indicates whether the command is enabled.\n     *\n     * #### Notes\n     * Visual representations may use this value to display a disabled\n     * command as grayed-out or in some other non-interactive fashion.\n     *\n     * The default value is `() => true`.\n     *\n     * If called via a keybinding the passed args will include a `_luminoEvent` that specify the event type and keys pressed for customization\n     */\n    isEnabled?: CommandFunc<boolean>;\n\n    /**\n     * A function which indicates whether the command is toggled.\n     *\n     * #### Notes\n     * Visual representations may use this value to display a toggled\n     * command in a different form, such as a check mark icon for a\n     * menu item or a depressed state for a toggle button.\n     *\n     * The default value is `() => false`.\n     */\n    isToggled?: CommandFunc<boolean>;\n\n    /**\n     * A function which indicates whether the command is toggleable.\n     *\n     * #### Notes\n     * Visual representations may use this value to display a toggled command in\n     * a different form, such as a check box for a menu item or a depressed\n     * state for a toggle button. This attribute also allows for accessible\n     * interfaces to notify the user that the command corresponds to some state.\n     *\n     * The default value is `true` if an `isToggled` function is given, `false`\n     * otherwise.\n     */\n    isToggleable?: boolean;\n\n    /**\n     * A function which indicates whether the command is visible.\n     *\n     * #### Notes\n     * Visual representations may use this value to hide or otherwise\n     * not display a non-visible command.\n     *\n     * The default value is `() => true`.\n     */\n    isVisible?: CommandFunc<boolean>;\n  }\n\n  /**\n   * An arguments object for the `commandChanged` signal.\n   */\n  export interface ICommandChangedArgs {\n    /**\n     * The id of the associated command.\n     *\n     * This will be `undefined` when the type is `'many-changed'`.\n     */\n    readonly id: string | undefined;\n\n    /**\n     * Whether the command was added, removed, or changed.\n     */\n    readonly type: 'added' | 'removed' | 'changed' | 'many-changed';\n  }\n\n  /**\n   * An arguments object for the `commandExecuted` signal.\n   */\n  export interface ICommandExecutedArgs {\n    /**\n     * The id of the associated command.\n     */\n    readonly id: string;\n\n    /**\n     * The arguments object passed to the command.\n     */\n    readonly args: ReadonlyPartialJSONObject;\n\n    /**\n     * The promise which resolves with the result of the command.\n     */\n    readonly result: Promise<any>;\n  }\n\n  /**\n   * An options object for creating a key binding.\n   */\n  export interface IKeyBindingOptions {\n    /**\n     * The default key sequence for the key binding.\n     *\n     * A key sequence is composed of one or more keystrokes, where each\n     * keystroke is a combination of modifiers and a primary key.\n     *\n     * Most key sequences will contain a single keystroke. Key sequences\n     * with multiple keystrokes are called \"chords\", and are useful for\n     * implementing modal input (ala Vim).\n     *\n     * Each keystroke in the sequence should be of the form:\n     *   `[<modifier 1> [<modifier 2> [<modifier N> ]]]<primary key>`\n     *\n     * The supported modifiers are: `Accel`, `Alt`, `Cmd`, `Ctrl`, and\n     * `Shift`. The `Accel` modifier is translated to `Cmd` on Mac and\n     * `Ctrl` on all other platforms. The `Cmd` modifier is ignored on\n     * non-Mac platforms.\n     *\n     * Keystrokes are case sensitive.\n     *\n     * **Examples:** `['Accel C']`, `['Shift F11']`, `['D', 'D']`\n     */\n    keys: string[];\n\n    /**\n     * The CSS selector for the key binding.\n     *\n     * The key binding will only be invoked when the selector matches a\n     * node on the propagation path of the keydown event. This allows\n     * the key binding to be restricted to user-defined contexts.\n     *\n     * The selector must not contain commas.\n     */\n    selector: string;\n\n    /**\n     * The id of the command to execute when the binding is matched.\n     */\n    command: string;\n\n    /**\n     * The arguments for the command, if necessary.\n     *\n     * The default value is an empty object. If a command is activated by _executeKeyBinding, `args = {_luminoEvent: {type: <string>, keys: <string[]>}}`\n     */\n    args?: ReadonlyPartialJSONObject;\n\n    /**\n     * The key sequence to use when running on Windows.\n     *\n     * If provided, this will override `keys` on Windows platforms.\n     */\n    winKeys?: string[];\n\n    /**\n     * The key sequence to use when running on Mac.\n     *\n     * If provided, this will override `keys` on Mac platforms.\n     */\n    macKeys?: string[];\n\n    /**\n     * The key sequence to use when running on Linux.\n     *\n     * If provided, this will override `keys` on Linux platforms.\n     */\n    linuxKeys?: string[];\n\n    /**\n     * Whether to prevent default action of the keyboard events during sequence matching.\n     *\n     * The default value is `true`.\n     */\n    preventDefault?: boolean;\n  }\n\n  /**\n   * An object which represents a key binding.\n   *\n   * #### Notes\n   * A key binding is an immutable object created by a registry.\n   */\n  export interface IKeyBinding {\n    /**\n     * The key sequence for the binding.\n     */\n    readonly keys: ReadonlyArray<string>;\n\n    /**\n     * The CSS selector for the binding.\n     */\n    readonly selector: string;\n\n    /**\n     * The command executed when the binding is matched.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyPartialJSONObject;\n\n    /**\n     * Whether to prevent default action of the keyboard events during sequence matching.\n     *\n     * The default value is `true`.\n     */\n    readonly preventDefault?: boolean;\n  }\n\n  /**\n   * An arguments object for the `keyBindingChanged` signal.\n   */\n  export interface IKeyBindingChangedArgs {\n    /**\n     * The key binding which was changed.\n     */\n    readonly binding: IKeyBinding;\n\n    /**\n     * Whether the key binding was added or removed.\n     */\n    readonly type: 'added' | 'removed';\n  }\n\n  /**\n   * An object which holds the results of parsing a keystroke.\n   */\n  export interface IKeystrokeParts {\n    /**\n     * Whether `'Cmd'` appears in the keystroke.\n     */\n    cmd: boolean;\n\n    /**\n     * Whether `'Ctrl'` appears in the keystroke.\n     */\n    ctrl: boolean;\n\n    /**\n     * Whether `'Alt'` appears in the keystroke.\n     */\n    alt: boolean;\n\n    /**\n     * Whether `'Shift'` appears in the keystroke.\n     */\n    shift: boolean;\n\n    /**\n     * The primary key for the keystroke.\n     */\n    key: string;\n  }\n\n  /**\n   * Parse a keystroke into its constituent components.\n   *\n   * @param keystroke - The keystroke of interest.\n   *\n   * @returns The parsed components of the keystroke.\n   *\n   * #### Notes\n   * The keystroke should be of the form:\n   *   `[<modifier 1> [<modifier 2> [<modifier N> ]]]<primary key>`\n   *\n   * The supported modifiers are: `Accel`, `Alt`, `Cmd`, `Ctrl`, and\n   * `Shift`. The `Accel` modifier is translated to `Cmd` on Mac and\n   * `Ctrl` on all other platforms.\n   *\n   * The parsing is tolerant and will not throw exceptions. Notably:\n   *   - Duplicate modifiers are ignored.\n   *   - Extra primary keys are ignored.\n   *   - The order of modifiers and primary key is irrelevant.\n   *   - The keystroke parts should be separated by whitespace.\n   *   - The keystroke is case sensitive.\n   */\n  export function parseKeystroke(keystroke: string): IKeystrokeParts {\n    let key = '';\n    let alt = false;\n    let cmd = false;\n    let ctrl = false;\n    let shift = false;\n    for (let token of keystroke.split(/\\s+/)) {\n      if (token === 'Accel') {\n        if (Platform.IS_MAC) {\n          cmd = true;\n        } else {\n          ctrl = true;\n        }\n      } else if (token === 'Alt') {\n        alt = true;\n      } else if (token === 'Cmd') {\n        cmd = true;\n      } else if (token === 'Ctrl') {\n        ctrl = true;\n      } else if (token === 'Shift') {\n        shift = true;\n      } else if (token.length > 0) {\n        key = token;\n      }\n    }\n    return { cmd, ctrl, alt, shift, key };\n  }\n\n  /**\n   * Normalize a keystroke into a canonical representation.\n   *\n   * @param keystroke - The keystroke of interest.\n   *\n   * @returns The normalized representation of the keystroke.\n   *\n   * #### Notes\n   * This normalizes the keystroke by removing duplicate modifiers and\n   * extra primary keys, and assembling the parts in a canonical order.\n   *\n   * The `Cmd` modifier is ignored on non-Mac platforms.\n   */\n  export function normalizeKeystroke(keystroke: string): string {\n    let mods = '';\n    let parts = parseKeystroke(keystroke);\n    if (parts.ctrl) {\n      mods += 'Ctrl ';\n    }\n    if (parts.alt) {\n      mods += 'Alt ';\n    }\n    if (parts.shift) {\n      mods += 'Shift ';\n    }\n    if (parts.cmd && Platform.IS_MAC) {\n      mods += 'Cmd ';\n    }\n    return mods + parts.key;\n  }\n\n  /**\n   * Get the platform-specific normalized keys for an options object.\n   *\n   * @param options - The options for the key binding.\n   *\n   * @returns Array of combined, normalized keys.\n   */\n  export function normalizeKeys(options: IKeyBindingOptions): string[] {\n    let keys: string[];\n    if (Platform.IS_WIN) {\n      keys = options.winKeys || options.keys;\n    } else if (Platform.IS_MAC) {\n      keys = options.macKeys || options.keys;\n    } else {\n      keys = options.linuxKeys || options.keys;\n    }\n    return keys.map(normalizeKeystroke);\n  }\n\n  /**\n   * Format keystrokes for display on the local system.\n   *\n   * If a list of keystrokes is provided, it will be displayed as\n   * a comma-separated string\n   *\n   * @param keystroke The keystrokes to format\n   * @returns The keystrokes representation\n   */\n  export function formatKeystroke(\n    keystroke: string | readonly string[]\n  ): string {\n    return typeof keystroke === 'string'\n      ? formatSingleKey(keystroke)\n      : keystroke.map(formatSingleKey).join(', ');\n\n    function formatSingleKey(key: string) {\n      let mods = [];\n      let separator = Platform.IS_MAC ? ' ' : '+';\n      let parts = parseKeystroke(key);\n      if (parts.ctrl) {\n        mods.push('Ctrl');\n      }\n      if (parts.alt) {\n        mods.push('Alt');\n      }\n      if (parts.shift) {\n        mods.push('Shift');\n      }\n      if (Platform.IS_MAC && parts.cmd) {\n        mods.push('Cmd');\n      }\n      mods.push(parts.key);\n      return mods.map(Private.formatKey).join(separator);\n    }\n  }\n\n  /**\n   * Check if `'keydown'` event is caused by pressing a modifier key that should be ignored.\n   *\n   * @param event - The event object for a `'keydown'` event.\n   *\n   * @returns `true` if modifier key was pressed, `false` otherwise.\n   */\n  export function isModifierKeyPressed(event: KeyboardEvent): boolean {\n    let layout = getKeyboardLayout();\n    let key = layout.keyForKeydownEvent(event);\n    return layout.isModifierKey(key);\n  }\n\n  /**\n   * Create a normalized keystroke for a `'keydown'` event.\n   *\n   * @param event - The event object for a `'keydown'` event.\n   *\n   * @returns A normalized keystroke, or an empty string if the event\n   *   does not represent a valid keystroke for the given layout.\n   */\n  export function keystrokeForKeydownEvent(event: KeyboardEvent): string {\n    let layout = getKeyboardLayout();\n    let key = layout.keyForKeydownEvent(event);\n    if (!key || layout.isModifierKey(key)) {\n      return '';\n    }\n    let mods = [];\n    if (event.ctrlKey) {\n      mods.push('Ctrl');\n    }\n    if (event.altKey) {\n      mods.push('Alt');\n    }\n    if (event.shiftKey) {\n      mods.push('Shift');\n    }\n    if (event.metaKey && Platform.IS_MAC) {\n      mods.push('Cmd');\n    }\n    mods.push(key);\n    return mods.join(' ');\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The timeout in ms for triggering a key binding chord.\n   */\n  export const CHORD_TIMEOUT = 1000;\n\n  /**\n   * The timeout in ms for stopping the hold on keybinding execution.\n   */\n  export const KEYBINDING_HOLD_TIMEOUT = 1000;\n\n  /**\n   * A convenience type alias for a command func.\n   */\n  export type CommandFunc<T> = CommandRegistry.CommandFunc<T>;\n\n  /**\n   * A convenience type alias for a command dataset.\n   */\n  export type Dataset = CommandRegistry.Dataset;\n\n  /**\n   * A normalized command object.\n   */\n  export interface ICommand {\n    readonly execute: CommandFunc<any>;\n    readonly describedBy: CommandFunc<\n      CommandRegistry.Description | Promise<CommandRegistry.Description>\n    >;\n    readonly label: CommandFunc<string>;\n    readonly mnemonic: CommandFunc<number>;\n    readonly icon: CommandFunc<VirtualElement.IRenderer | undefined>;\n    readonly iconClass: CommandFunc<string>;\n    readonly iconLabel: CommandFunc<string>;\n    readonly caption: CommandFunc<string>;\n    readonly usage: CommandFunc<string>;\n    readonly className: CommandFunc<string>;\n    readonly dataset: CommandFunc<Dataset>;\n    readonly isEnabled: CommandFunc<boolean>;\n    readonly isToggled: CommandFunc<boolean>;\n    readonly isToggleable: boolean;\n    readonly isVisible: CommandFunc<boolean>;\n  }\n\n  /**\n   * Create a normalized command from an options object.\n   */\n  export function createCommand(\n    options: CommandRegistry.ICommandOptions\n  ): ICommand {\n    return {\n      execute: options.execute,\n      describedBy: asFunc<\n        CommandRegistry.Description | Promise<CommandRegistry.Description>\n      >(\n        typeof options.describedBy === 'function'\n          ? (options.describedBy as CommandFunc<\n              CommandRegistry.Description | Promise<CommandRegistry.Description>\n            >)\n          : { args: null, ...options.describedBy },\n        () => {\n          return { args: null };\n        }\n      ),\n      label: asFunc(options.label, emptyStringFunc),\n      mnemonic: asFunc(options.mnemonic, negativeOneFunc),\n      icon: asFunc(options.icon, undefinedFunc),\n      iconClass: asFunc(options.iconClass, emptyStringFunc),\n      iconLabel: asFunc(options.iconLabel, emptyStringFunc),\n      caption: asFunc(options.caption, emptyStringFunc),\n      usage: asFunc(options.usage, emptyStringFunc),\n      className: asFunc(options.className, emptyStringFunc),\n      dataset: asFunc(options.dataset, emptyDatasetFunc),\n      isEnabled: options.isEnabled || trueFunc,\n      isToggled: options.isToggled || falseFunc,\n      isToggleable: options.isToggleable || !!options.isToggled,\n      isVisible: options.isVisible || trueFunc\n    };\n  }\n\n  /**\n   * Create a key binding object from key binding options.\n   */\n  export function createKeyBinding(\n    options: CommandRegistry.IKeyBindingOptions\n  ): CommandRegistry.IKeyBinding {\n    return {\n      keys: CommandRegistry.normalizeKeys(options),\n      selector: validateSelector(options),\n      command: options.command,\n      args: options.args || JSONExt.emptyObject,\n      preventDefault: options.preventDefault ?? true\n    };\n  }\n\n  /**\n   * An object which holds the results of a key binding match.\n   */\n  export interface IMatchResult {\n    /**\n     * The best key binding which exactly matches the key sequence.\n     */\n    exact: CommandRegistry.IKeyBinding | null;\n\n    /**\n     * The key bindings which partially match the sequence.\n     */\n    partial: CommandRegistry.IKeyBinding[];\n  }\n\n  /**\n   * Find the key bindings which match a key sequence.\n   *\n   * This returns a match result which contains the best exact matching\n   * binding, and a flag which indicates if there are partial matches.\n   */\n  export function matchKeyBinding(\n    bindings: ReadonlyArray<CommandRegistry.IKeyBinding>,\n    keys: ReadonlyArray<string>,\n    event: KeyboardEvent\n  ): IMatchResult {\n    // The current best exact match.\n    let exact: CommandRegistry.IKeyBinding | null = null;\n\n    // Partial matches.\n    let partial = [];\n\n    // The match distance for the exact match.\n    let distance = Infinity;\n\n    // The specificity for the exact match.\n    let specificity = 0;\n\n    // Iterate over the bindings and search for the best match.\n    for (let i = 0, n = bindings.length; i < n; ++i) {\n      // Lookup the current binding.\n      let binding = bindings[i];\n\n      // Check whether the key binding sequence is a match.\n      let sqm = matchSequence(binding.keys, keys);\n\n      // If there is no match, the binding is ignored.\n      if (sqm === SequenceMatch.None) {\n        continue;\n      }\n\n      // If it is a partial match and no other partial match has been\n      // found, ensure the selector matches and set the partial flag.\n      if (sqm === SequenceMatch.Partial) {\n        if (targetDistance(binding.selector, event) !== -1) {\n          partial.push(binding);\n        }\n        continue;\n      }\n\n      // Ignore the match if the selector doesn't match, or if the\n      // matched node is farther away than the current best match.\n      let td = targetDistance(binding.selector, event);\n      if (td === -1 || td > distance) {\n        continue;\n      }\n\n      // Get the specificity for the selector.\n      let sp = Selector.calculateSpecificity(binding.selector);\n\n      // Update the best match if this match is stronger.\n      if (!exact || td < distance || sp >= specificity) {\n        exact = binding;\n        distance = td;\n        specificity = sp;\n      }\n    }\n\n    // Return the match result.\n    return { exact, partial };\n  }\n\n  /**\n   * Replay a keyboard event.\n   *\n   * This synthetically dispatches a clone of the keyboard event.\n   */\n  export function replayKeyEvent(event: KeyboardEvent): void {\n    event.target!.dispatchEvent(cloneKeyboardEvent(event));\n  }\n\n  export function formatKey(key: string): string {\n    if (Platform.IS_MAC) {\n      return MAC_DISPLAY.hasOwnProperty(key) ? MAC_DISPLAY[key] : key;\n    } else {\n      return WIN_DISPLAY.hasOwnProperty(key) ? WIN_DISPLAY[key] : key;\n    }\n  }\n\n  const MAC_DISPLAY: { [key: string]: string } = {\n    Backspace: '⌫',\n    Tab: '⇥',\n    Enter: '⏎',\n    Shift: '⇧',\n    Ctrl: '⌃',\n    Alt: '⌥',\n    Escape: '⎋',\n    PageUp: '⇞',\n    PageDown: '⇟',\n    End: '↘',\n    Home: '↖',\n    ArrowLeft: '←',\n    ArrowUp: '↑',\n    ArrowRight: '→',\n    ArrowDown: '↓',\n    Delete: '⌦',\n    Cmd: '⌘'\n  };\n\n  const WIN_DISPLAY: { [key: string]: string } = {\n    Escape: 'Esc',\n    PageUp: 'Page Up',\n    PageDown: 'Page Down',\n    ArrowLeft: 'Left',\n    ArrowUp: 'Up',\n    ArrowRight: 'Right',\n    ArrowDown: 'Down',\n    Delete: 'Del'\n  };\n\n  /**\n   * A singleton empty string function.\n   */\n  const emptyStringFunc = () => '';\n\n  /**\n   * A singleton `-1` number function\n   */\n  const negativeOneFunc = () => -1;\n\n  /**\n   * A singleton true boolean function.\n   */\n  const trueFunc = () => true;\n\n  /**\n   * A singleton false boolean function.\n   */\n  const falseFunc = () => false;\n\n  /**\n   * A singleton empty dataset function.\n   */\n  const emptyDatasetFunc = () => ({});\n\n  /**\n   * A singleton undefined function\n   */\n  const undefinedFunc = () => undefined;\n\n  /**\n   * Cast a value or command func to a command func.\n   */\n  function asFunc<T>(\n    value: undefined | T | CommandFunc<T>,\n    dfault: CommandFunc<T>\n  ): CommandFunc<T> {\n    if (value === undefined) {\n      return dfault;\n    }\n    if (typeof value === 'function') {\n      return value as CommandFunc<T>;\n    }\n    return () => value;\n  }\n\n  /**\n   * Validate the selector for an options object.\n   *\n   * This returns the validated selector, or throws if the selector is\n   * invalid or contains commas.\n   */\n  function validateSelector(\n    options: CommandRegistry.IKeyBindingOptions\n  ): string {\n    if (options.selector.indexOf(',') !== -1) {\n      throw new Error(`Selector cannot contain commas: ${options.selector}`);\n    }\n    if (!Selector.isValid(options.selector)) {\n      throw new Error(`Invalid selector: ${options.selector}`);\n    }\n    return options.selector;\n  }\n\n  /**\n   * An enum which describes the possible sequence matches.\n   */\n  const enum SequenceMatch {\n    None,\n    Exact,\n    Partial\n  }\n\n  /**\n   * Test whether a key binding sequence matches a key sequence.\n   *\n   * Returns a `SequenceMatch` value indicating the type of match.\n   */\n  function matchSequence(\n    bindKeys: ReadonlyArray<string>,\n    userKeys: ReadonlyArray<string>\n  ): SequenceMatch {\n    if (bindKeys.length < userKeys.length) {\n      return SequenceMatch.None;\n    }\n    for (let i = 0, n = userKeys.length; i < n; ++i) {\n      if (bindKeys[i] !== userKeys[i]) {\n        return SequenceMatch.None;\n      }\n    }\n    if (bindKeys.length > userKeys.length) {\n      return SequenceMatch.Partial;\n    }\n    return SequenceMatch.Exact;\n  }\n\n  /**\n   * Find the distance from the target node to the first matching node.\n   *\n   * This traverses the event path from `target` to `currentTarget` and\n   * computes the distance from `target` to the first node which matches\n   * the CSS selector. If no match is found, `-1` is returned.\n   */\n  function targetDistance(selector: string, event: KeyboardEvent): number {\n    let targ = event.target as Element | null;\n    let curr = event.currentTarget as Element | null;\n    for (let dist = 0; targ !== null; targ = targ.parentElement, ++dist) {\n      if (targ.hasAttribute('data-lm-suppress-shortcuts')) {\n        return -1;\n      }\n      if (Selector.matches(targ, selector)) {\n        return dist;\n      }\n      if (targ === curr) {\n        return -1;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Clone a keyboard event.\n   */\n  function cloneKeyboardEvent(event: KeyboardEvent): KeyboardEvent {\n    // A custom event is required because Chrome nulls out the\n    // `keyCode` field in user-generated `KeyboardEvent` types.\n    let clone = document.createEvent('Event') as any;\n    let bubbles = event.bubbles || true;\n    let cancelable = event.cancelable || true;\n    clone.initEvent(event.type || 'keydown', bubbles, cancelable);\n    clone.key = event.key || '';\n    clone.keyCode = event.keyCode || 0;\n    clone.which = event.keyCode || 0;\n    clone.ctrlKey = event.ctrlKey || false;\n    clone.altKey = event.altKey || false;\n    clone.shiftKey = event.shiftKey || false;\n    clone.metaKey = event.metaKey || false;\n    clone.view = event.view || window;\n    return clone as KeyboardEvent;\n  }\n}\n"],"mappings":"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"}