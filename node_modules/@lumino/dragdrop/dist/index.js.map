{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module dragdrop\n */\nimport { MimeData } from '@lumino/coreutils';\n\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\n\n/**\n * @deprecated\n *\n * #### Notes\n * This interface is deprecated. Use Drag.Event instead.\n */\nexport interface IDragEvent extends Drag.Event {}\n\n/**\n * An object which manages a drag-drop operation.\n *\n * A drag object dispatches four different events to drop targets:\n *\n * - `'lm-dragenter'` - Dispatched when the mouse enters the target\n *   element. This event must be canceled in order to receive any\n *   of the other events.\n *\n * - `'lm-dragover'` - Dispatched when the mouse moves over the drop\n *   target. It must cancel the event and set the `dropAction` to one\n *   of the supported actions in order to receive drop events.\n *\n * - `'lm-dragleave'` - Dispatched when the mouse leaves the target\n *   element. This includes moving the mouse into child elements.\n *\n * - `'lm-drop'`- Dispatched when the mouse is released over the target\n *   element when the target indicates an appropriate drop action. If\n *   the event is canceled, the indicated drop action is returned to\n *   the initiator through the resolved promise.\n *\n * A drag operation can be terminated at any time by pressing `Escape`\n * or by disposing the drag object.\n *\n * A drag object has the ability to automatically scroll a scrollable\n * element when the mouse is hovered near one of its edges. To enable\n * this, add the `data-lm-dragscroll` attribute to any element which\n * the drag object should consider for scrolling.\n *\n * #### Notes\n * This class is designed to be used when dragging and dropping custom\n * data *within* a single application. It is *not* a replacement for\n * the native drag-drop API. Instead, it provides an API which allows\n * drag operations to be initiated programmatically and enables the\n * transfer of arbitrary non-string objects; features which are not\n * possible with the native drag-drop API.\n */\nexport class Drag implements IDisposable {\n  /**\n   * Construct a new drag object.\n   *\n   * @param options - The options for initializing the drag.\n   */\n  constructor(options: Drag.IOptions) {\n    this.document = options.document || document;\n    this.mimeData = options.mimeData;\n    this.dragImage = options.dragImage || null;\n    this.proposedAction = options.proposedAction || 'copy';\n    this.supportedActions = options.supportedActions || 'all';\n    this.source = options.source || null;\n  }\n\n  /**\n   * Dispose of the resources held by the drag object.\n   *\n   * #### Notes\n   * This will cancel the drag operation if it is active.\n   */\n  dispose(): void {\n    // Do nothing if the drag object is already disposed.\n    if (this._disposed) {\n      return;\n    }\n    this._disposed = true;\n\n    // If there is a current target, dispatch a drag leave event.\n    if (this._currentTarget) {\n      let event = new PointerEvent('pointerup', {\n        bubbles: true,\n        cancelable: true,\n        clientX: -1,\n        clientY: -1\n      });\n      Private.dispatchDragLeave(this, this._currentTarget, null, event);\n    }\n\n    // Finalize the drag object with `'none'`.\n    this._finalize('none');\n  }\n\n  /**\n   * The mime data for the drag object.\n   */\n  readonly mimeData: MimeData;\n\n  /**\n   * The target document for dragging events.\n   */\n  readonly document: Document | ShadowRoot;\n\n  /**\n   * The drag image element for the drag object.\n   */\n  readonly dragImage: HTMLElement | null;\n\n  /**\n   * The proposed drop action for the drag object.\n   */\n  readonly proposedAction: Drag.DropAction;\n\n  /**\n   * The supported drop actions for the drag object.\n   */\n  readonly supportedActions: Drag.SupportedActions;\n\n  /**\n   * Get the drag source for the drag object.\n   */\n  readonly source: any;\n\n  /**\n   * Test whether the drag object is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Start the drag operation at the specified client position.\n   *\n   * @param clientX - The client X position for the drag start.\n   *\n   * @param clientY - The client Y position for the drag start.\n   *\n   * @returns A promise which resolves to the result of the drag.\n   *\n   * #### Notes\n   * If the drag has already been started, the promise created by the\n   * first call to `start` is returned.\n   *\n   * If the drag operation has ended, or if the drag object has been\n   * disposed, the returned promise will resolve to `'none'`.\n   *\n   * The drag object will be automatically disposed when drag operation\n   * completes. This means `Drag` objects are for single-use only.\n   *\n   * This method assumes the left mouse button is already held down.\n   */\n  start(clientX: number, clientY: number): Promise<Drag.DropAction> {\n    // If the drag object is already disposed, resolve to `none`.\n    if (this._disposed) {\n      return Promise.resolve('none');\n    }\n\n    // If the drag has already been started, return the promise.\n    if (this._promise) {\n      return this._promise;\n    }\n\n    // Install the document listeners for the drag object.\n    this._addListeners();\n\n    // Attach the drag image at the specified client position.\n    this._attachDragImage(clientX, clientY);\n\n    // Create the promise which will be resolved on completion.\n    this._promise = new Promise<Drag.DropAction>(resolve => {\n      this._resolve = resolve;\n    });\n\n    // Trigger a fake move event to kick off the drag operation.\n    let event = new PointerEvent('pointermove', {\n      bubbles: true,\n      cancelable: true,\n      clientX,\n      clientY\n    });\n    document.dispatchEvent(event);\n\n    // Return the pending promise for the drag operation.\n    return this._promise;\n  }\n\n  /**\n   * Handle the DOM events for the drag operation.\n   *\n   * @param event - The DOM event sent to the drag object.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the document. It should not be\n   * called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'pointermove':\n        this._evtPointerMove(event as PointerEvent);\n        break;\n      case 'pointerup':\n        this._evtPointerUp(event as PointerEvent);\n        break;\n      case 'keydown':\n        this._evtKeyDown(event as KeyboardEvent);\n        break;\n      default:\n        // Stop all other events during drag-drop.\n        event.preventDefault();\n        event.stopPropagation();\n        break;\n    }\n  }\n\n  /**\n   * Move the drag image element to the specified location.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  protected moveDragImage(clientX: number, clientY: number): void {\n    if (!this.dragImage) {\n      return;\n    }\n    let style = this.dragImage.style;\n    style.transform = `translate(${clientX}px, ${clientY}px)`;\n  }\n\n  /**\n   * Handle the `'pointermove'` event for the drag object.\n   */\n  private _evtPointerMove(event: PointerEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Update the current target node and dispatch enter/leave events.\n    this._updateCurrentTarget(event);\n\n    // Update the drag scroll element.\n    this._updateDragScroll(event);\n\n    // Move the drag image to the specified client position. This is\n    // performed *after* dispatching to prevent unnecessary reflows.\n    this.moveDragImage(event.clientX, event.clientY);\n  }\n\n  /**\n   * Handle the `'pointerup'` event for the drag object.\n   */\n  private _evtPointerUp(event: PointerEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Do nothing if the left button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Update the current target node and dispatch enter/leave events.\n    // This prevents a subtle issue where the DOM mutates under the\n    // cursor after the last move event but before the drop event.\n    this._updateCurrentTarget(event);\n\n    // If there is no current target, finalize with `'none'`.\n    if (!this._currentTarget) {\n      this._finalize('none');\n      return;\n    }\n\n    // If the last drop action was `'none'`, dispatch a leave event\n    // to the current target and finalize the drag with `'none'`.\n    if (this._dropAction === 'none') {\n      Private.dispatchDragLeave(this, this._currentTarget, null, event);\n      this._finalize('none');\n      return;\n    }\n\n    // Dispatch the drop event at the current target and finalize\n    // with the resulting drop action.\n    let action = Private.dispatchDrop(this, this._currentTarget, event);\n    this._finalize(action);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the drag object.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Cancel the drag if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      this.dispose();\n    }\n  }\n\n  /**\n   * Add the document event listeners for the drag object.\n   */\n  private _addListeners(): void {\n    document.addEventListener('pointerdown', this, true);\n    document.addEventListener('pointermove', this, true);\n    document.addEventListener('pointerup', this, true);\n    document.addEventListener('pointerenter', this, true);\n    document.addEventListener('pointerleave', this, true);\n    document.addEventListener('pointerover', this, true);\n    document.addEventListener('pointerout', this, true);\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('keyup', this, true);\n    document.addEventListener('keypress', this, true);\n    document.addEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Remove the document event listeners for the drag object.\n   */\n  private _removeListeners(): void {\n    document.removeEventListener('pointerdown', this, true);\n    document.removeEventListener('pointermove', this, true);\n    document.removeEventListener('pointerup', this, true);\n    document.removeEventListener('pointerenter', this, true);\n    document.removeEventListener('pointerleave', this, true);\n    document.removeEventListener('pointerover', this, true);\n    document.removeEventListener('pointerout', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('keyup', this, true);\n    document.removeEventListener('keypress', this, true);\n    document.removeEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Update the drag scroll element under the mouse.\n   */\n  private _updateDragScroll(event: PointerEvent): void {\n    // Find the scroll target under the mouse.\n    let target = Private.findScrollTarget(event);\n\n    // Bail if there is nothing to scroll.\n    if (!this._scrollTarget && !target) {\n      return;\n    }\n\n    // Start the scroll loop if needed.\n    if (!this._scrollTarget) {\n      setTimeout(this._onScrollFrame, 500);\n    }\n\n    // Update the scroll target.\n    this._scrollTarget = target;\n  }\n\n  /**\n   * Update the current target node using the given mouse event.\n   */\n  private _updateCurrentTarget(event: PointerEvent): void {\n    // Fetch common local state.\n    let prevTarget = this._currentTarget;\n    let currTarget = this._currentTarget;\n    let prevElem = this._currentElement;\n\n    // Find the current indicated element at the given position.\n    let currElem = Private.findElementBehindBackdrop(event, this.document);\n\n    // Update the current element reference.\n    this._currentElement = currElem;\n\n    // If the indicated element changes from the previous iteration,\n    // and is different from the current target, dispatch the exit\n    // event to the target.\n    if (currElem !== prevElem && currElem !== currTarget) {\n      Private.dispatchDragExit(this, currTarget, currElem, event);\n    }\n\n    // If the indicated element changes from the previous iteration,\n    // and is different from the current target, dispatch the enter\n    // event and compute the new target element.\n    if (currElem !== prevElem && currElem !== currTarget) {\n      currTarget = Private.dispatchDragEnter(this, currElem, currTarget, event);\n    }\n\n    // If the current target element has changed, update the current\n    // target reference and dispatch the leave event to the old target.\n    if (currTarget !== prevTarget) {\n      this._currentTarget = currTarget;\n      Private.dispatchDragLeave(this, prevTarget, currTarget, event);\n    }\n\n    // Dispatch the drag over event and update the drop action.\n    let action = Private.dispatchDragOver(this, currTarget, event);\n    this._setDropAction(action);\n  }\n\n  /**\n   * Attach the drag image element at the specified location.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  private _attachDragImage(clientX: number, clientY: number): void {\n    if (!this.dragImage) {\n      return;\n    }\n    this.dragImage.classList.add('lm-mod-drag-image');\n    let style = this.dragImage.style;\n    style.pointerEvents = 'none';\n    style.position = 'fixed';\n    style.transform = `translate(${clientX}px, ${clientY}px)`;\n    const body =\n      this.document instanceof Document\n        ? this.document.body\n        : (this.document.firstElementChild as HTMLElement);\n    body.appendChild(this.dragImage);\n  }\n\n  /**\n   * Detach the drag image element from the DOM.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  private _detachDragImage(): void {\n    if (!this.dragImage) {\n      return;\n    }\n    let parent = this.dragImage.parentNode;\n    if (!parent) {\n      return;\n    }\n    parent.removeChild(this.dragImage);\n  }\n\n  /**\n   * Set the internal drop action state and update the drag cursor.\n   */\n  private _setDropAction(action: Drag.DropAction): void {\n    action = Private.validateAction(action, this.supportedActions);\n    if (this._override && this._dropAction === action) {\n      return;\n    }\n    switch (action) {\n      case 'none':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('no-drop', this.document);\n        break;\n      case 'copy':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('copy', this.document);\n        break;\n      case 'link':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('alias', this.document);\n        break;\n      case 'move':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('move', this.document);\n        break;\n    }\n  }\n\n  /**\n   * Finalize the drag operation and resolve the drag promise.\n   */\n  private _finalize(action: Drag.DropAction): void {\n    // Store the resolve function as a temp variable.\n    let resolve = this._resolve;\n\n    // Remove the document event listeners.\n    this._removeListeners();\n\n    // Detach the drag image.\n    this._detachDragImage();\n\n    // Dispose of the cursor override.\n    if (this._override) {\n      this._override.dispose();\n      this._override = null;\n    }\n\n    // Clear the mime data.\n    this.mimeData.clear();\n\n    // Clear the rest of the internal drag state.\n    this._disposed = true;\n    this._dropAction = 'none';\n    this._currentTarget = null;\n    this._currentElement = null;\n    this._scrollTarget = null;\n    this._promise = null;\n    this._resolve = null;\n\n    // Finally, resolve the promise to the given drop action.\n    if (resolve) {\n      resolve(action);\n    }\n  }\n\n  /**\n   * The scroll loop handler function.\n   */\n  private _onScrollFrame = () => {\n    // Bail early if there is no scroll target.\n    if (!this._scrollTarget) {\n      return;\n    }\n\n    // Unpack the scroll target.\n    let { element, edge, distance } = this._scrollTarget;\n\n    // Calculate the scroll delta using nonlinear acceleration.\n    let d = Private.SCROLL_EDGE_SIZE - distance;\n    let f = Math.pow(d / Private.SCROLL_EDGE_SIZE, 2);\n    let s = Math.max(1, Math.round(f * Private.SCROLL_EDGE_SIZE));\n\n    // Scroll the element in the specified direction.\n    switch (edge) {\n      case 'top':\n        element.scrollTop -= s;\n        break;\n      case 'left':\n        element.scrollLeft -= s;\n        break;\n      case 'right':\n        element.scrollLeft += s;\n        break;\n      case 'bottom':\n        element.scrollTop += s;\n        break;\n    }\n\n    // Request the next cycle of the scroll loop.\n    requestAnimationFrame(this._onScrollFrame);\n  };\n\n  private _disposed = false;\n  private _dropAction: Drag.DropAction = 'none';\n  private _override: IDisposable | null = null;\n  private _currentTarget: Element | null = null;\n  private _currentElement: Element | null = null;\n  private _promise: Promise<Drag.DropAction> | null = null;\n  private _scrollTarget: Private.IScrollTarget | null = null;\n  private _resolve: ((value: Drag.DropAction) => void) | null = null;\n}\n\n/**\n * The namespace for the `Drag` class statics.\n */\nexport namespace Drag {\n  /**\n   * A type alias which defines the possible independent drop actions.\n   */\n  export type DropAction = 'none' | 'copy' | 'link' | 'move';\n\n  /**\n   * A type alias which defines the possible supported drop actions.\n   */\n  export type SupportedActions =\n    | DropAction\n    | 'copy-link'\n    | 'copy-move'\n    | 'link-move'\n    | 'all';\n\n  /**\n   * An options object for initializing a `Drag` object.\n   */\n  export interface IOptions {\n    /**\n     * The root element for dragging DOM artifacts (defaults to document).\n     */\n    document?: Document | ShadowRoot;\n\n    /**\n     * The populated mime data for the drag operation.\n     */\n    mimeData: MimeData;\n\n    /**\n     * An optional drag image which follows the mouse cursor.\n     *\n     * #### Notes\n     * The drag image can be any DOM element. It is not limited to\n     * image or canvas elements as with the native drag-drop APIs.\n     *\n     * If provided, this will be positioned at the mouse cursor on each\n     * mouse move event. A CSS transform can be used to offset the node\n     * from its specified position.\n     *\n     * The drag image will automatically have the `lm-mod-drag-image`\n     * class name added.\n     *\n     * The default value is `null`.\n     */\n    dragImage?: HTMLElement;\n\n    /**\n     * The optional proposed drop action for the drag operation.\n     *\n     * #### Notes\n     * This can be provided as a hint to the drop targets as to which\n     * drop action is preferred.\n     *\n     * The default value is `'copy'`.\n     */\n    proposedAction?: DropAction;\n\n    /**\n     * The drop actions supported by the drag initiator.\n     *\n     * #### Notes\n     * A drop target must indicate that it intends to perform one of the\n     * supported actions in order to receive a drop event. However, it is\n     * not required to *actually* perform that action when handling the\n     * drop event. Therefore, the initiator must be prepared to handle\n     * any drop action performed by a drop target.\n     *\n     * The default value is `'all'`.\n     */\n    supportedActions?: SupportedActions;\n\n    /**\n     * An optional object which indicates the source of the drag.\n     *\n     * #### Notes\n     * For advanced applications, the drag initiator may wish to expose\n     * a source object to the drop targets. That object can be specified\n     * here and will be carried along with the drag events.\n     *\n     * The default value is `null`.\n     */\n    source?: any;\n  }\n\n  /**\n   * A custom event used for drag-drop operations.\n   *\n   * #### Notes\n   * In order to receive `'lm-dragover'`, `'lm-dragleave'`, or `'lm-drop'`\n   * events, a drop target must cancel the `'lm-dragenter'` event by\n   * calling the event's `preventDefault()` method.\n   */\n  export class Event extends DragEvent {\n    constructor(event: PointerEvent, options: Event.IOptions) {\n      super(options.type, {\n        bubbles: true,\n        cancelable: true,\n        altKey: event.altKey,\n        button: event.button,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        ctrlKey: event.ctrlKey,\n        detail: 0,\n        metaKey: event.metaKey,\n        relatedTarget: options.related,\n        screenX: event.screenX,\n        screenY: event.screenY,\n        shiftKey: event.shiftKey,\n        view: window\n      });\n\n      const { drag } = options;\n      this.dropAction = 'none';\n      this.mimeData = drag.mimeData;\n      this.proposedAction = drag.proposedAction;\n      this.supportedActions = drag.supportedActions;\n      this.source = drag.source;\n    }\n\n    /**\n     * The drop action supported or taken by the drop target.\n     *\n     * #### Notes\n     * At the start of each event, this value will be `'none'`. During a\n     * `'lm-dragover'` event, the drop target must set this value to one\n     * of the supported actions, or the drop event will not occur.\n     *\n     * When handling the drop event, the drop target should set this\n     * to the action which was *actually* taken. This value will be\n     * reported back to the drag initiator.\n     */\n    dropAction: DropAction;\n\n    /**\n     * The drop action proposed by the drag initiator.\n     *\n     * #### Notes\n     * This is the action which is *preferred* by the drag initiator. The\n     * drop target is not required to perform this action, but should if\n     * it all possible.\n     */\n    readonly proposedAction: DropAction;\n\n    /**\n     * The drop actions supported by the drag initiator.\n     *\n     * #### Notes\n     * If the `dropAction` is not set to one of the supported actions\n     * during the `'lm-dragover'` event, the drop event will not occur.\n     */\n    readonly supportedActions: SupportedActions;\n\n    /**\n     * The mime data associated with the event.\n     *\n     * #### Notes\n     * This is mime data provided by the drag initiator. Drop targets\n     * should use this data to determine if they can handle the drop.\n     */\n    readonly mimeData: MimeData;\n\n    /**\n     * The source object of the drag, as provided by the drag initiator.\n     *\n     * #### Notes\n     * For advanced applications, the drag initiator may wish to expose\n     * a source object to the drop targets. That will be provided here\n     * if given by the drag initiator, otherwise it will be `null`.\n     */\n    readonly source: any;\n  }\n\n  /**\n   * The namespace for the `Event` class statics.\n   */\n  export namespace Event {\n    /**\n     * An options object for initializing a `Drag` object.\n     */\n    export interface IOptions {\n      /**\n       * The drag object to use for seeding the drag data.\n       */\n      drag: Drag;\n\n      /**\n       * The related target for the event, or `null`.\n       */\n      related: Element | null;\n\n      /**\n       * The drag event type.\n       */\n      type:\n        | 'lm-dragenter'\n        | 'lm-dragexit'\n        | 'lm-dragleave'\n        | 'lm-dragover'\n        | 'lm-drop';\n    }\n  }\n\n  /**\n   * Override the cursor icon for the entire document.\n   *\n   * @param cursor - The string representing the cursor style.\n   *\n   * @returns A disposable which will clear the override when disposed.\n   *\n   * #### Notes\n   * The most recent call to `overrideCursor` takes precedence.\n   * Disposing an old override has no effect on the current override.\n   *\n   * This utility function is used by the `Drag` class to override the\n   * mouse cursor during a drag-drop operation, but it can also be used\n   * by other classes to fix the cursor icon during normal mouse drags.\n   *\n   * #### Example\n   * ```typescript\n   * import { Drag } from '@lumino/dragdrop';\n   *\n   * // Force the cursor to be 'wait' for the entire document.\n   * let override = Drag.overrideCursor('wait');\n   *\n   * // Clear the override by disposing the return value.\n   * override.dispose();\n   * ```\n   */\n  export function overrideCursor(\n    cursor: string,\n    doc: Document | ShadowRoot = document\n  ): IDisposable {\n    return Private.overrideCursor(cursor, doc);\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The size of a drag scroll edge, in pixels.\n   */\n  export const SCROLL_EDGE_SIZE = 20;\n\n  /**\n   * Validate the given action is one of the supported actions.\n   *\n   * Returns the given action or `'none'` if the action is unsupported.\n   */\n  export function validateAction(\n    action: Drag.DropAction,\n    supported: Drag.SupportedActions\n  ): Drag.DropAction {\n    return actionTable[action] & supportedTable[supported] ? action : 'none';\n  }\n\n  /**\n   * An object which holds the scroll target data.\n   */\n  export interface IScrollTarget {\n    /**\n     * The element to be scrolled.\n     */\n    element: Element;\n\n    /**\n     * The scroll edge underneath the mouse.\n     */\n    edge: 'top' | 'left' | 'right' | 'bottom';\n\n    /**\n     * The distance from the mouse to the scroll edge.\n     */\n    distance: number;\n  }\n\n  /**\n   * Find the event target using pointer position if given, or otherwise\n   * the central position of the backdrop.\n   */\n  export function findElementBehindBackdrop(\n    event?: PointerEvent,\n    root: Document | ShadowRoot = document\n  ) {\n    if (event) {\n      // Check if we already cached element for this event.\n      if (lastElementEventSearch && event == lastElementEventSearch.event) {\n        return lastElementEventSearch.element;\n      }\n      Private.cursorBackdrop.style.zIndex = '-1000';\n      const element: Element | null = root.elementFromPoint(\n        event.clientX,\n        event.clientY\n      );\n      Private.cursorBackdrop.style.zIndex = '';\n      lastElementEventSearch = { event, element };\n      return element;\n    } else {\n      const transform = cursorBackdrop.style.transform;\n      if (lastElementSearch && transform === lastElementSearch.transform) {\n        return lastElementSearch.element;\n      }\n      const bbox = Private.cursorBackdrop.getBoundingClientRect();\n      Private.cursorBackdrop.style.zIndex = '-1000';\n      const element = root.elementFromPoint(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2\n      );\n      Private.cursorBackdrop.style.zIndex = '';\n      lastElementSearch = { transform, element };\n      return element;\n    }\n  }\n\n  let lastElementEventSearch: {\n    event: PointerEvent;\n    element: Element | null;\n  } | null = null;\n  let lastElementSearch: {\n    transform: string;\n    element: Element | null;\n  } | null = null;\n\n  /**\n   * Find the drag scroll target under the mouse, if any.\n   */\n  export function findScrollTarget(event: PointerEvent): IScrollTarget | null {\n    // Look up the client mouse position.\n    let x = event.clientX;\n    let y = event.clientY;\n\n    // Get the element under the mouse.\n    let element: Element | null = findElementBehindBackdrop(event);\n\n    // Search for a scrollable target based on the mouse position.\n    // The null assert in third clause of for-loop is required due to:\n    // https://github.com/Microsoft/TypeScript/issues/14143\n    for (; element; element = element!.parentElement) {\n      // Ignore elements which are not marked as scrollable.\n      if (!element.hasAttribute('data-lm-dragscroll')) {\n        continue;\n      }\n\n      // Set up the coordinate offsets for the element.\n      let offsetX = 0;\n      let offsetY = 0;\n      if (element === document.body) {\n        offsetX = window.pageXOffset;\n        offsetY = window.pageYOffset;\n      }\n\n      // Get the element bounds in viewport coordinates.\n      let r = element.getBoundingClientRect();\n      let top = r.top + offsetY;\n      let left = r.left + offsetX;\n      let right = left + r.width;\n      let bottom = top + r.height;\n\n      // Skip the element if it's not under the mouse.\n      if (x < left || x >= right || y < top || y >= bottom) {\n        continue;\n      }\n\n      // Compute the distance to each edge.\n      let dl = x - left + 1;\n      let dt = y - top + 1;\n      let dr = right - x;\n      let db = bottom - y;\n\n      // Find the smallest of the edge distances.\n      let distance = Math.min(dl, dt, dr, db);\n\n      // Skip the element if the mouse is not within a scroll edge.\n      if (distance > SCROLL_EDGE_SIZE) {\n        continue;\n      }\n\n      // Set up the edge result variable.\n      let edge: 'top' | 'left' | 'right' | 'bottom';\n\n      // Find the edge for the computed distance.\n      switch (distance) {\n        case db:\n          edge = 'bottom';\n          break;\n        case dt:\n          edge = 'top';\n          break;\n        case dr:\n          edge = 'right';\n          break;\n        case dl:\n          edge = 'left';\n          break;\n        default:\n          throw 'unreachable';\n      }\n\n      // Compute how much the element can scroll in width and height.\n      let dsw = element.scrollWidth - element.clientWidth;\n      let dsh = element.scrollHeight - element.clientHeight;\n\n      // Determine if the element should be scrolled for the edge.\n      let shouldScroll: boolean;\n      switch (edge) {\n        case 'top':\n          shouldScroll = dsh > 0 && element.scrollTop > 0;\n          break;\n        case 'left':\n          shouldScroll = dsw > 0 && element.scrollLeft > 0;\n          break;\n        case 'right':\n          shouldScroll = dsw > 0 && element.scrollLeft < dsw;\n          break;\n        case 'bottom':\n          shouldScroll = dsh > 0 && element.scrollTop < dsh;\n          break;\n        default:\n          throw 'unreachable';\n      }\n\n      // Skip the element if it should not be scrolled.\n      if (!shouldScroll) {\n        continue;\n      }\n\n      // Return the drag scroll target.\n      return { element, edge, distance };\n    }\n\n    // No drag scroll target was found.\n    return null;\n  }\n\n  /**\n   * Dispatch a drag enter event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currElem - The currently indicated element, or `null`. This\n   *   is the \"immediate user selection\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The element to use as the current drag target. This is the\n   *   \"current target element\" from the whatwg spec, and may be `null`.\n   *\n   * #### Notes\n   * This largely implements the drag enter portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragEnter(\n    drag: Drag,\n    currElem: Element | null,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): Element | null {\n    // If the current element is null, return null as the new target.\n    if (!currElem) {\n      return null;\n    }\n\n    // Dispatch a drag enter event to the current element.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: currTarget,\n      type: 'lm-dragenter'\n    });\n    let canceled = !currElem.dispatchEvent(dragEvent);\n\n    // If the event was canceled, use the current element as the new target.\n    if (canceled) {\n      return currElem;\n    }\n\n    // If the current element is the document body, keep the original target.\n    const body =\n      drag.document instanceof Document\n        ? drag.document.body\n        : (drag.document.firstElementChild as HTMLElement);\n\n    if (currElem === body) {\n      return currTarget;\n    }\n\n    // Dispatch a drag enter event on the document body.\n    dragEvent = new Drag.Event(event, {\n      drag,\n      related: currTarget,\n      type: 'lm-dragenter'\n    });\n    body.dispatchEvent(dragEvent);\n\n    // Ignore the event cancellation, and use the body as the new target.\n    return body;\n  }\n\n  /**\n   * Dispatch a drag exit event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param prevTarget - The previous target element, or `null`. This\n   *   is the previous \"current target element\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * #### Notes\n   * This largely implements the drag exit portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragExit(\n    drag: Drag,\n    prevTarget: Element | null,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): void {\n    // If the previous target is null, do nothing.\n    if (!prevTarget) {\n      return;\n    }\n\n    // Dispatch the drag exit event to the previous target.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: currTarget,\n      type: 'lm-dragexit'\n    });\n    prevTarget.dispatchEvent(dragEvent);\n  }\n\n  /**\n   * Dispatch a drag leave event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param prevTarget - The previous target element, or `null`. This\n   *   is the previous \"current target element\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * #### Notes\n   * This largely implements the drag leave portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragLeave(\n    drag: Drag,\n    prevTarget: Element | null,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): void {\n    // If the previous target is null, do nothing.\n    if (!prevTarget) {\n      return;\n    }\n\n    // Dispatch the drag leave event to the previous target.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: currTarget,\n      type: 'lm-dragleave'\n    });\n    prevTarget.dispatchEvent(dragEvent);\n  }\n\n  /**\n   * Dispatch a drag over event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The `DropAction` result of the drag over event.\n   *\n   * #### Notes\n   * This largely implements the drag over portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragOver(\n    drag: Drag,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): Drag.DropAction {\n    // If there is no current target, the drop action is none.\n    if (!currTarget) {\n      return 'none';\n    }\n\n    // Dispatch the drag over event to the current target.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: null,\n      type: 'lm-dragover'\n    });\n    let canceled = !currTarget.dispatchEvent(dragEvent);\n\n    // If the event was canceled, return the drop action result.\n    if (canceled) {\n      return dragEvent.dropAction;\n    }\n\n    // Otherwise, the effective drop action is none.\n    return 'none';\n  }\n\n  /**\n   * Dispatch a drop event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The `DropAction` result of the drop event.\n   *\n   * #### Notes\n   * This largely implements the drag over portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDrop(\n    drag: Drag,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): Drag.DropAction {\n    // If there is no current target, the drop action is none.\n    if (!currTarget) {\n      return 'none';\n    }\n\n    // Dispatch the drop event to the current target.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: null,\n      type: 'lm-drop'\n    });\n    let canceled = !currTarget.dispatchEvent(dragEvent);\n\n    // If the event was canceled, return the drop action result.\n    if (canceled) {\n      return dragEvent.dropAction;\n    }\n\n    // Otherwise, the effective drop action is none.\n    return 'none';\n  }\n\n  /**\n   * A lookup table from drop action to bit value.\n   */\n  const actionTable: { [key: string]: number } = {\n    none: 0x0,\n    copy: 0x1,\n    link: 0x2,\n    move: 0x4\n  };\n\n  /**\n   * A lookup table from supported action to drop action bit mask.\n   */\n  const supportedTable: { [key: string]: number } = {\n    none: actionTable['none'],\n    copy: actionTable['copy'],\n    link: actionTable['link'],\n    move: actionTable['move'],\n    'copy-link': actionTable['copy'] | actionTable['link'],\n    'copy-move': actionTable['copy'] | actionTable['move'],\n    'link-move': actionTable['link'] | actionTable['move'],\n    all: actionTable['copy'] | actionTable['link'] | actionTable['move']\n  };\n\n  /**\n   * Implementation of `Drag.overrideCursor`.\n   */\n  export function overrideCursor(\n    cursor: string,\n    doc: Document | ShadowRoot = document\n  ): IDisposable {\n    let id = ++overrideCursorID;\n    const body =\n      doc instanceof Document\n        ? doc.body\n        : (doc.firstElementChild as HTMLElement);\n    if (!cursorBackdrop.isConnected) {\n      // Hide the backdrop until the pointer moves to avoid issues with\n      // native double click detection, used in e.g. datagrid editing.\n      cursorBackdrop.style.transform = 'scale(0)';\n      body.appendChild(cursorBackdrop);\n      resetBackdropScroll();\n      document.addEventListener('pointermove', alignBackdrop, {\n        capture: true,\n        passive: true\n      });\n      cursorBackdrop.addEventListener('scroll', propagateBackdropScroll, {\n        capture: true,\n        passive: true\n      });\n    }\n    cursorBackdrop.style.cursor = cursor;\n    return new DisposableDelegate(() => {\n      if (id === overrideCursorID && cursorBackdrop.isConnected) {\n        document.removeEventListener('pointermove', alignBackdrop, true);\n        cursorBackdrop.removeEventListener(\n          'scroll',\n          propagateBackdropScroll,\n          true\n        );\n        body.removeChild(cursorBackdrop);\n      }\n    });\n  }\n\n  /**\n   * Move cursor backdrop to match cursor position.\n   */\n  function alignBackdrop(event: PointerEvent) {\n    if (!cursorBackdrop) {\n      return;\n    }\n    cursorBackdrop.style.transform = `translate(${event.clientX}px, ${event.clientY}px)`;\n  }\n\n  /**\n   * Propagate the scroll event from the backdrop element to the scroll target.\n   * The scroll target is defined by presence of `data-lm-dragscroll` attribute.\n   */\n  function propagateBackdropScroll(_event: Event) {\n    if (!cursorBackdrop) {\n      return;\n    }\n    // Get the element under behind the centre of the cursor backdrop\n    // (essentially behind the cursor, but possibly a few pixels off).\n    let element: Element | null = findElementBehindBackdrop();\n    if (!element) {\n      return;\n    }\n    // Find scroll target.\n    const scrollTarget = element.closest('[data-lm-dragscroll]');\n    if (!scrollTarget) {\n      return;\n    }\n    // Apply the scroll delta to the correct target.\n    scrollTarget.scrollTop += cursorBackdrop.scrollTop - backdropScrollOrigin;\n    scrollTarget.scrollLeft += cursorBackdrop.scrollLeft - backdropScrollOrigin;\n\n    // Center the scroll position.\n    resetBackdropScroll();\n  }\n\n  /**\n   * Reset the backdrop scroll to allow further scrolling.\n   */\n  function resetBackdropScroll() {\n    cursorBackdrop.scrollTop = backdropScrollOrigin;\n    cursorBackdrop.scrollLeft = backdropScrollOrigin;\n  }\n\n  /**\n   * The center of the backdrop node scroll area.\n   */\n  const backdropScrollOrigin = 500;\n\n  /**\n   * Create cursor backdrop node.\n   */\n  function createCursorBackdrop(): HTMLElement {\n    const backdrop = document.createElement('div');\n    backdrop.classList.add('lm-cursor-backdrop');\n    return backdrop;\n  }\n\n  /**\n   * The internal id for the active cursor override.\n   */\n  let overrideCursorID = 0;\n\n  /**\n   * A backdrop node overriding pointer cursor.\n   *\n   * #### Notes\n   * We use a backdrop node rather than setting the cursor directly on the body\n   * because setting it on body requires more extensive style recalculation for\n   * reliable application of the cursor, this is the cursor not being overriden\n   * when over child elements with another style like `cursor: other!important`.\n   */\n  export const cursorBackdrop: HTMLElement = createCursorBackdrop();\n}\n"],"names":["DisposableDelegate"],"mappings":"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"}