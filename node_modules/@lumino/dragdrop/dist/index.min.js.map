{"version":3,"names":["Drag","constructor","options","this","_onScrollFrame","_scrollTarget","element","edge","distance","d","Private","SCROLL_EDGE_SIZE","f","Math","pow","s","max","round","scrollTop","scrollLeft","requestAnimationFrame","_disposed","_dropAction","_override","_currentTarget","_currentElement","_promise","_resolve","document","mimeData","dragImage","proposedAction","supportedActions","source","dispose","event","PointerEvent","bubbles","cancelable","clientX","clientY","dispatchDragLeave","_finalize","isDisposed","start","Promise","resolve","_addListeners","_attachDragImage","dispatchEvent","handleEvent","type","_evtPointerMove","_evtPointerUp","_evtKeyDown","preventDefault","stopPropagation","moveDragImage","style","transform","_updateCurrentTarget","_updateDragScroll","button","action","dispatchDrop","keyCode","addEventListener","_removeListeners","removeEventListener","target","findScrollTarget","setTimeout","prevTarget","currTarget","prevElem","currElem","findElementBehindBackdrop","dispatchDragExit","dispatchDragEnter","dispatchDragOver","_setDropAction","classList","add","pointerEvents","position","Document","body","firstElementChild","appendChild","_detachDragImage","parent","parentNode","removeChild","validateAction","overrideCursor","clear","Event","DragEvent","super","altKey","ctrlKey","detail","metaKey","relatedTarget","related","screenX","screenY","shiftKey","view","window","drag","dropAction","cursor","doc","root","lastElementEventSearch","cursorBackdrop","zIndex","elementFromPoint","lastElementSearch","bbox","getBoundingClientRect","left","width","top","height","supported","actionTable","supportedTable","x","y","parentElement","hasAttribute","offsetX","offsetY","pageXOffset","pageYOffset","r","right","bottom","dl","dt","dr","db","min","shouldScroll","dsw","scrollWidth","clientWidth","dsh","scrollHeight","clientHeight","dragEvent","none","copy","link","move","all","alignBackdrop","propagateBackdropScroll","_event","scrollTarget","closest","backdropScrollOrigin","resetBackdropScroll","id","overrideCursorID","isConnected","capture","passive","DisposableDelegate","backdrop","createElement","createCursorBackdrop"],"sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module dragdrop\n */\nimport { MimeData } from '@lumino/coreutils';\n\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\n\n/**\n * @deprecated\n *\n * #### Notes\n * This interface is deprecated. Use Drag.Event instead.\n */\nexport interface IDragEvent extends Drag.Event {}\n\n/**\n * An object which manages a drag-drop operation.\n *\n * A drag object dispatches four different events to drop targets:\n *\n * - `'lm-dragenter'` - Dispatched when the mouse enters the target\n *   element. This event must be canceled in order to receive any\n *   of the other events.\n *\n * - `'lm-dragover'` - Dispatched when the mouse moves over the drop\n *   target. It must cancel the event and set the `dropAction` to one\n *   of the supported actions in order to receive drop events.\n *\n * - `'lm-dragleave'` - Dispatched when the mouse leaves the target\n *   element. This includes moving the mouse into child elements.\n *\n * - `'lm-drop'`- Dispatched when the mouse is released over the target\n *   element when the target indicates an appropriate drop action. If\n *   the event is canceled, the indicated drop action is returned to\n *   the initiator through the resolved promise.\n *\n * A drag operation can be terminated at any time by pressing `Escape`\n * or by disposing the drag object.\n *\n * A drag object has the ability to automatically scroll a scrollable\n * element when the mouse is hovered near one of its edges. To enable\n * this, add the `data-lm-dragscroll` attribute to any element which\n * the drag object should consider for scrolling.\n *\n * #### Notes\n * This class is designed to be used when dragging and dropping custom\n * data *within* a single application. It is *not* a replacement for\n * the native drag-drop API. Instead, it provides an API which allows\n * drag operations to be initiated programmatically and enables the\n * transfer of arbitrary non-string objects; features which are not\n * possible with the native drag-drop API.\n */\nexport class Drag implements IDisposable {\n  /**\n   * Construct a new drag object.\n   *\n   * @param options - The options for initializing the drag.\n   */\n  constructor(options: Drag.IOptions) {\n    this.document = options.document || document;\n    this.mimeData = options.mimeData;\n    this.dragImage = options.dragImage || null;\n    this.proposedAction = options.proposedAction || 'copy';\n    this.supportedActions = options.supportedActions || 'all';\n    this.source = options.source || null;\n  }\n\n  /**\n   * Dispose of the resources held by the drag object.\n   *\n   * #### Notes\n   * This will cancel the drag operation if it is active.\n   */\n  dispose(): void {\n    // Do nothing if the drag object is already disposed.\n    if (this._disposed) {\n      return;\n    }\n    this._disposed = true;\n\n    // If there is a current target, dispatch a drag leave event.\n    if (this._currentTarget) {\n      let event = new PointerEvent('pointerup', {\n        bubbles: true,\n        cancelable: true,\n        clientX: -1,\n        clientY: -1\n      });\n      Private.dispatchDragLeave(this, this._currentTarget, null, event);\n    }\n\n    // Finalize the drag object with `'none'`.\n    this._finalize('none');\n  }\n\n  /**\n   * The mime data for the drag object.\n   */\n  readonly mimeData: MimeData;\n\n  /**\n   * The target document for dragging events.\n   */\n  readonly document: Document | ShadowRoot;\n\n  /**\n   * The drag image element for the drag object.\n   */\n  readonly dragImage: HTMLElement | null;\n\n  /**\n   * The proposed drop action for the drag object.\n   */\n  readonly proposedAction: Drag.DropAction;\n\n  /**\n   * The supported drop actions for the drag object.\n   */\n  readonly supportedActions: Drag.SupportedActions;\n\n  /**\n   * Get the drag source for the drag object.\n   */\n  readonly source: any;\n\n  /**\n   * Test whether the drag object is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Start the drag operation at the specified client position.\n   *\n   * @param clientX - The client X position for the drag start.\n   *\n   * @param clientY - The client Y position for the drag start.\n   *\n   * @returns A promise which resolves to the result of the drag.\n   *\n   * #### Notes\n   * If the drag has already been started, the promise created by the\n   * first call to `start` is returned.\n   *\n   * If the drag operation has ended, or if the drag object has been\n   * disposed, the returned promise will resolve to `'none'`.\n   *\n   * The drag object will be automatically disposed when drag operation\n   * completes. This means `Drag` objects are for single-use only.\n   *\n   * This method assumes the left mouse button is already held down.\n   */\n  start(clientX: number, clientY: number): Promise<Drag.DropAction> {\n    // If the drag object is already disposed, resolve to `none`.\n    if (this._disposed) {\n      return Promise.resolve('none');\n    }\n\n    // If the drag has already been started, return the promise.\n    if (this._promise) {\n      return this._promise;\n    }\n\n    // Install the document listeners for the drag object.\n    this._addListeners();\n\n    // Attach the drag image at the specified client position.\n    this._attachDragImage(clientX, clientY);\n\n    // Create the promise which will be resolved on completion.\n    this._promise = new Promise<Drag.DropAction>(resolve => {\n      this._resolve = resolve;\n    });\n\n    // Trigger a fake move event to kick off the drag operation.\n    let event = new PointerEvent('pointermove', {\n      bubbles: true,\n      cancelable: true,\n      clientX,\n      clientY\n    });\n    document.dispatchEvent(event);\n\n    // Return the pending promise for the drag operation.\n    return this._promise;\n  }\n\n  /**\n   * Handle the DOM events for the drag operation.\n   *\n   * @param event - The DOM event sent to the drag object.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the document. It should not be\n   * called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'pointermove':\n        this._evtPointerMove(event as PointerEvent);\n        break;\n      case 'pointerup':\n        this._evtPointerUp(event as PointerEvent);\n        break;\n      case 'keydown':\n        this._evtKeyDown(event as KeyboardEvent);\n        break;\n      default:\n        // Stop all other events during drag-drop.\n        event.preventDefault();\n        event.stopPropagation();\n        break;\n    }\n  }\n\n  /**\n   * Move the drag image element to the specified location.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  protected moveDragImage(clientX: number, clientY: number): void {\n    if (!this.dragImage) {\n      return;\n    }\n    let style = this.dragImage.style;\n    style.transform = `translate(${clientX}px, ${clientY}px)`;\n  }\n\n  /**\n   * Handle the `'pointermove'` event for the drag object.\n   */\n  private _evtPointerMove(event: PointerEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Update the current target node and dispatch enter/leave events.\n    this._updateCurrentTarget(event);\n\n    // Update the drag scroll element.\n    this._updateDragScroll(event);\n\n    // Move the drag image to the specified client position. This is\n    // performed *after* dispatching to prevent unnecessary reflows.\n    this.moveDragImage(event.clientX, event.clientY);\n  }\n\n  /**\n   * Handle the `'pointerup'` event for the drag object.\n   */\n  private _evtPointerUp(event: PointerEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Do nothing if the left button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Update the current target node and dispatch enter/leave events.\n    // This prevents a subtle issue where the DOM mutates under the\n    // cursor after the last move event but before the drop event.\n    this._updateCurrentTarget(event);\n\n    // If there is no current target, finalize with `'none'`.\n    if (!this._currentTarget) {\n      this._finalize('none');\n      return;\n    }\n\n    // If the last drop action was `'none'`, dispatch a leave event\n    // to the current target and finalize the drag with `'none'`.\n    if (this._dropAction === 'none') {\n      Private.dispatchDragLeave(this, this._currentTarget, null, event);\n      this._finalize('none');\n      return;\n    }\n\n    // Dispatch the drop event at the current target and finalize\n    // with the resulting drop action.\n    let action = Private.dispatchDrop(this, this._currentTarget, event);\n    this._finalize(action);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the drag object.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop all input events during drag-drop.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Cancel the drag if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      this.dispose();\n    }\n  }\n\n  /**\n   * Add the document event listeners for the drag object.\n   */\n  private _addListeners(): void {\n    document.addEventListener('pointerdown', this, true);\n    document.addEventListener('pointermove', this, true);\n    document.addEventListener('pointerup', this, true);\n    document.addEventListener('pointerenter', this, true);\n    document.addEventListener('pointerleave', this, true);\n    document.addEventListener('pointerover', this, true);\n    document.addEventListener('pointerout', this, true);\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('keyup', this, true);\n    document.addEventListener('keypress', this, true);\n    document.addEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Remove the document event listeners for the drag object.\n   */\n  private _removeListeners(): void {\n    document.removeEventListener('pointerdown', this, true);\n    document.removeEventListener('pointermove', this, true);\n    document.removeEventListener('pointerup', this, true);\n    document.removeEventListener('pointerenter', this, true);\n    document.removeEventListener('pointerleave', this, true);\n    document.removeEventListener('pointerover', this, true);\n    document.removeEventListener('pointerout', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('keyup', this, true);\n    document.removeEventListener('keypress', this, true);\n    document.removeEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Update the drag scroll element under the mouse.\n   */\n  private _updateDragScroll(event: PointerEvent): void {\n    // Find the scroll target under the mouse.\n    let target = Private.findScrollTarget(event);\n\n    // Bail if there is nothing to scroll.\n    if (!this._scrollTarget && !target) {\n      return;\n    }\n\n    // Start the scroll loop if needed.\n    if (!this._scrollTarget) {\n      setTimeout(this._onScrollFrame, 500);\n    }\n\n    // Update the scroll target.\n    this._scrollTarget = target;\n  }\n\n  /**\n   * Update the current target node using the given mouse event.\n   */\n  private _updateCurrentTarget(event: PointerEvent): void {\n    // Fetch common local state.\n    let prevTarget = this._currentTarget;\n    let currTarget = this._currentTarget;\n    let prevElem = this._currentElement;\n\n    // Find the current indicated element at the given position.\n    let currElem = Private.findElementBehindBackdrop(event, this.document);\n\n    // Update the current element reference.\n    this._currentElement = currElem;\n\n    // If the indicated element changes from the previous iteration,\n    // and is different from the current target, dispatch the exit\n    // event to the target.\n    if (currElem !== prevElem && currElem !== currTarget) {\n      Private.dispatchDragExit(this, currTarget, currElem, event);\n    }\n\n    // If the indicated element changes from the previous iteration,\n    // and is different from the current target, dispatch the enter\n    // event and compute the new target element.\n    if (currElem !== prevElem && currElem !== currTarget) {\n      currTarget = Private.dispatchDragEnter(this, currElem, currTarget, event);\n    }\n\n    // If the current target element has changed, update the current\n    // target reference and dispatch the leave event to the old target.\n    if (currTarget !== prevTarget) {\n      this._currentTarget = currTarget;\n      Private.dispatchDragLeave(this, prevTarget, currTarget, event);\n    }\n\n    // Dispatch the drag over event and update the drop action.\n    let action = Private.dispatchDragOver(this, currTarget, event);\n    this._setDropAction(action);\n  }\n\n  /**\n   * Attach the drag image element at the specified location.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  private _attachDragImage(clientX: number, clientY: number): void {\n    if (!this.dragImage) {\n      return;\n    }\n    this.dragImage.classList.add('lm-mod-drag-image');\n    let style = this.dragImage.style;\n    style.pointerEvents = 'none';\n    style.position = 'fixed';\n    style.transform = `translate(${clientX}px, ${clientY}px)`;\n    const body =\n      this.document instanceof Document\n        ? this.document.body\n        : (this.document.firstElementChild as HTMLElement);\n    body.appendChild(this.dragImage);\n  }\n\n  /**\n   * Detach the drag image element from the DOM.\n   *\n   * This is a no-op if there is no drag image element.\n   */\n  private _detachDragImage(): void {\n    if (!this.dragImage) {\n      return;\n    }\n    let parent = this.dragImage.parentNode;\n    if (!parent) {\n      return;\n    }\n    parent.removeChild(this.dragImage);\n  }\n\n  /**\n   * Set the internal drop action state and update the drag cursor.\n   */\n  private _setDropAction(action: Drag.DropAction): void {\n    action = Private.validateAction(action, this.supportedActions);\n    if (this._override && this._dropAction === action) {\n      return;\n    }\n    switch (action) {\n      case 'none':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('no-drop', this.document);\n        break;\n      case 'copy':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('copy', this.document);\n        break;\n      case 'link':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('alias', this.document);\n        break;\n      case 'move':\n        this._dropAction = action;\n        this._override = Drag.overrideCursor('move', this.document);\n        break;\n    }\n  }\n\n  /**\n   * Finalize the drag operation and resolve the drag promise.\n   */\n  private _finalize(action: Drag.DropAction): void {\n    // Store the resolve function as a temp variable.\n    let resolve = this._resolve;\n\n    // Remove the document event listeners.\n    this._removeListeners();\n\n    // Detach the drag image.\n    this._detachDragImage();\n\n    // Dispose of the cursor override.\n    if (this._override) {\n      this._override.dispose();\n      this._override = null;\n    }\n\n    // Clear the mime data.\n    this.mimeData.clear();\n\n    // Clear the rest of the internal drag state.\n    this._disposed = true;\n    this._dropAction = 'none';\n    this._currentTarget = null;\n    this._currentElement = null;\n    this._scrollTarget = null;\n    this._promise = null;\n    this._resolve = null;\n\n    // Finally, resolve the promise to the given drop action.\n    if (resolve) {\n      resolve(action);\n    }\n  }\n\n  /**\n   * The scroll loop handler function.\n   */\n  private _onScrollFrame = () => {\n    // Bail early if there is no scroll target.\n    if (!this._scrollTarget) {\n      return;\n    }\n\n    // Unpack the scroll target.\n    let { element, edge, distance } = this._scrollTarget;\n\n    // Calculate the scroll delta using nonlinear acceleration.\n    let d = Private.SCROLL_EDGE_SIZE - distance;\n    let f = Math.pow(d / Private.SCROLL_EDGE_SIZE, 2);\n    let s = Math.max(1, Math.round(f * Private.SCROLL_EDGE_SIZE));\n\n    // Scroll the element in the specified direction.\n    switch (edge) {\n      case 'top':\n        element.scrollTop -= s;\n        break;\n      case 'left':\n        element.scrollLeft -= s;\n        break;\n      case 'right':\n        element.scrollLeft += s;\n        break;\n      case 'bottom':\n        element.scrollTop += s;\n        break;\n    }\n\n    // Request the next cycle of the scroll loop.\n    requestAnimationFrame(this._onScrollFrame);\n  };\n\n  private _disposed = false;\n  private _dropAction: Drag.DropAction = 'none';\n  private _override: IDisposable | null = null;\n  private _currentTarget: Element | null = null;\n  private _currentElement: Element | null = null;\n  private _promise: Promise<Drag.DropAction> | null = null;\n  private _scrollTarget: Private.IScrollTarget | null = null;\n  private _resolve: ((value: Drag.DropAction) => void) | null = null;\n}\n\n/**\n * The namespace for the `Drag` class statics.\n */\nexport namespace Drag {\n  /**\n   * A type alias which defines the possible independent drop actions.\n   */\n  export type DropAction = 'none' | 'copy' | 'link' | 'move';\n\n  /**\n   * A type alias which defines the possible supported drop actions.\n   */\n  export type SupportedActions =\n    | DropAction\n    | 'copy-link'\n    | 'copy-move'\n    | 'link-move'\n    | 'all';\n\n  /**\n   * An options object for initializing a `Drag` object.\n   */\n  export interface IOptions {\n    /**\n     * The root element for dragging DOM artifacts (defaults to document).\n     */\n    document?: Document | ShadowRoot;\n\n    /**\n     * The populated mime data for the drag operation.\n     */\n    mimeData: MimeData;\n\n    /**\n     * An optional drag image which follows the mouse cursor.\n     *\n     * #### Notes\n     * The drag image can be any DOM element. It is not limited to\n     * image or canvas elements as with the native drag-drop APIs.\n     *\n     * If provided, this will be positioned at the mouse cursor on each\n     * mouse move event. A CSS transform can be used to offset the node\n     * from its specified position.\n     *\n     * The drag image will automatically have the `lm-mod-drag-image`\n     * class name added.\n     *\n     * The default value is `null`.\n     */\n    dragImage?: HTMLElement;\n\n    /**\n     * The optional proposed drop action for the drag operation.\n     *\n     * #### Notes\n     * This can be provided as a hint to the drop targets as to which\n     * drop action is preferred.\n     *\n     * The default value is `'copy'`.\n     */\n    proposedAction?: DropAction;\n\n    /**\n     * The drop actions supported by the drag initiator.\n     *\n     * #### Notes\n     * A drop target must indicate that it intends to perform one of the\n     * supported actions in order to receive a drop event. However, it is\n     * not required to *actually* perform that action when handling the\n     * drop event. Therefore, the initiator must be prepared to handle\n     * any drop action performed by a drop target.\n     *\n     * The default value is `'all'`.\n     */\n    supportedActions?: SupportedActions;\n\n    /**\n     * An optional object which indicates the source of the drag.\n     *\n     * #### Notes\n     * For advanced applications, the drag initiator may wish to expose\n     * a source object to the drop targets. That object can be specified\n     * here and will be carried along with the drag events.\n     *\n     * The default value is `null`.\n     */\n    source?: any;\n  }\n\n  /**\n   * A custom event used for drag-drop operations.\n   *\n   * #### Notes\n   * In order to receive `'lm-dragover'`, `'lm-dragleave'`, or `'lm-drop'`\n   * events, a drop target must cancel the `'lm-dragenter'` event by\n   * calling the event's `preventDefault()` method.\n   */\n  export class Event extends DragEvent {\n    constructor(event: PointerEvent, options: Event.IOptions) {\n      super(options.type, {\n        bubbles: true,\n        cancelable: true,\n        altKey: event.altKey,\n        button: event.button,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        ctrlKey: event.ctrlKey,\n        detail: 0,\n        metaKey: event.metaKey,\n        relatedTarget: options.related,\n        screenX: event.screenX,\n        screenY: event.screenY,\n        shiftKey: event.shiftKey,\n        view: window\n      });\n\n      const { drag } = options;\n      this.dropAction = 'none';\n      this.mimeData = drag.mimeData;\n      this.proposedAction = drag.proposedAction;\n      this.supportedActions = drag.supportedActions;\n      this.source = drag.source;\n    }\n\n    /**\n     * The drop action supported or taken by the drop target.\n     *\n     * #### Notes\n     * At the start of each event, this value will be `'none'`. During a\n     * `'lm-dragover'` event, the drop target must set this value to one\n     * of the supported actions, or the drop event will not occur.\n     *\n     * When handling the drop event, the drop target should set this\n     * to the action which was *actually* taken. This value will be\n     * reported back to the drag initiator.\n     */\n    dropAction: DropAction;\n\n    /**\n     * The drop action proposed by the drag initiator.\n     *\n     * #### Notes\n     * This is the action which is *preferred* by the drag initiator. The\n     * drop target is not required to perform this action, but should if\n     * it all possible.\n     */\n    readonly proposedAction: DropAction;\n\n    /**\n     * The drop actions supported by the drag initiator.\n     *\n     * #### Notes\n     * If the `dropAction` is not set to one of the supported actions\n     * during the `'lm-dragover'` event, the drop event will not occur.\n     */\n    readonly supportedActions: SupportedActions;\n\n    /**\n     * The mime data associated with the event.\n     *\n     * #### Notes\n     * This is mime data provided by the drag initiator. Drop targets\n     * should use this data to determine if they can handle the drop.\n     */\n    readonly mimeData: MimeData;\n\n    /**\n     * The source object of the drag, as provided by the drag initiator.\n     *\n     * #### Notes\n     * For advanced applications, the drag initiator may wish to expose\n     * a source object to the drop targets. That will be provided here\n     * if given by the drag initiator, otherwise it will be `null`.\n     */\n    readonly source: any;\n  }\n\n  /**\n   * The namespace for the `Event` class statics.\n   */\n  export namespace Event {\n    /**\n     * An options object for initializing a `Drag` object.\n     */\n    export interface IOptions {\n      /**\n       * The drag object to use for seeding the drag data.\n       */\n      drag: Drag;\n\n      /**\n       * The related target for the event, or `null`.\n       */\n      related: Element | null;\n\n      /**\n       * The drag event type.\n       */\n      type:\n        | 'lm-dragenter'\n        | 'lm-dragexit'\n        | 'lm-dragleave'\n        | 'lm-dragover'\n        | 'lm-drop';\n    }\n  }\n\n  /**\n   * Override the cursor icon for the entire document.\n   *\n   * @param cursor - The string representing the cursor style.\n   *\n   * @returns A disposable which will clear the override when disposed.\n   *\n   * #### Notes\n   * The most recent call to `overrideCursor` takes precedence.\n   * Disposing an old override has no effect on the current override.\n   *\n   * This utility function is used by the `Drag` class to override the\n   * mouse cursor during a drag-drop operation, but it can also be used\n   * by other classes to fix the cursor icon during normal mouse drags.\n   *\n   * #### Example\n   * ```typescript\n   * import { Drag } from '@lumino/dragdrop';\n   *\n   * // Force the cursor to be 'wait' for the entire document.\n   * let override = Drag.overrideCursor('wait');\n   *\n   * // Clear the override by disposing the return value.\n   * override.dispose();\n   * ```\n   */\n  export function overrideCursor(\n    cursor: string,\n    doc: Document | ShadowRoot = document\n  ): IDisposable {\n    return Private.overrideCursor(cursor, doc);\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The size of a drag scroll edge, in pixels.\n   */\n  export const SCROLL_EDGE_SIZE = 20;\n\n  /**\n   * Validate the given action is one of the supported actions.\n   *\n   * Returns the given action or `'none'` if the action is unsupported.\n   */\n  export function validateAction(\n    action: Drag.DropAction,\n    supported: Drag.SupportedActions\n  ): Drag.DropAction {\n    return actionTable[action] & supportedTable[supported] ? action : 'none';\n  }\n\n  /**\n   * An object which holds the scroll target data.\n   */\n  export interface IScrollTarget {\n    /**\n     * The element to be scrolled.\n     */\n    element: Element;\n\n    /**\n     * The scroll edge underneath the mouse.\n     */\n    edge: 'top' | 'left' | 'right' | 'bottom';\n\n    /**\n     * The distance from the mouse to the scroll edge.\n     */\n    distance: number;\n  }\n\n  /**\n   * Find the event target using pointer position if given, or otherwise\n   * the central position of the backdrop.\n   */\n  export function findElementBehindBackdrop(\n    event?: PointerEvent,\n    root: Document | ShadowRoot = document\n  ) {\n    if (event) {\n      // Check if we already cached element for this event.\n      if (lastElementEventSearch && event == lastElementEventSearch.event) {\n        return lastElementEventSearch.element;\n      }\n      Private.cursorBackdrop.style.zIndex = '-1000';\n      const element: Element | null = root.elementFromPoint(\n        event.clientX,\n        event.clientY\n      );\n      Private.cursorBackdrop.style.zIndex = '';\n      lastElementEventSearch = { event, element };\n      return element;\n    } else {\n      const transform = cursorBackdrop.style.transform;\n      if (lastElementSearch && transform === lastElementSearch.transform) {\n        return lastElementSearch.element;\n      }\n      const bbox = Private.cursorBackdrop.getBoundingClientRect();\n      Private.cursorBackdrop.style.zIndex = '-1000';\n      const element = root.elementFromPoint(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2\n      );\n      Private.cursorBackdrop.style.zIndex = '';\n      lastElementSearch = { transform, element };\n      return element;\n    }\n  }\n\n  let lastElementEventSearch: {\n    event: PointerEvent;\n    element: Element | null;\n  } | null = null;\n  let lastElementSearch: {\n    transform: string;\n    element: Element | null;\n  } | null = null;\n\n  /**\n   * Find the drag scroll target under the mouse, if any.\n   */\n  export function findScrollTarget(event: PointerEvent): IScrollTarget | null {\n    // Look up the client mouse position.\n    let x = event.clientX;\n    let y = event.clientY;\n\n    // Get the element under the mouse.\n    let element: Element | null = findElementBehindBackdrop(event);\n\n    // Search for a scrollable target based on the mouse position.\n    // The null assert in third clause of for-loop is required due to:\n    // https://github.com/Microsoft/TypeScript/issues/14143\n    for (; element; element = element!.parentElement) {\n      // Ignore elements which are not marked as scrollable.\n      if (!element.hasAttribute('data-lm-dragscroll')) {\n        continue;\n      }\n\n      // Set up the coordinate offsets for the element.\n      let offsetX = 0;\n      let offsetY = 0;\n      if (element === document.body) {\n        offsetX = window.pageXOffset;\n        offsetY = window.pageYOffset;\n      }\n\n      // Get the element bounds in viewport coordinates.\n      let r = element.getBoundingClientRect();\n      let top = r.top + offsetY;\n      let left = r.left + offsetX;\n      let right = left + r.width;\n      let bottom = top + r.height;\n\n      // Skip the element if it's not under the mouse.\n      if (x < left || x >= right || y < top || y >= bottom) {\n        continue;\n      }\n\n      // Compute the distance to each edge.\n      let dl = x - left + 1;\n      let dt = y - top + 1;\n      let dr = right - x;\n      let db = bottom - y;\n\n      // Find the smallest of the edge distances.\n      let distance = Math.min(dl, dt, dr, db);\n\n      // Skip the element if the mouse is not within a scroll edge.\n      if (distance > SCROLL_EDGE_SIZE) {\n        continue;\n      }\n\n      // Set up the edge result variable.\n      let edge: 'top' | 'left' | 'right' | 'bottom';\n\n      // Find the edge for the computed distance.\n      switch (distance) {\n        case db:\n          edge = 'bottom';\n          break;\n        case dt:\n          edge = 'top';\n          break;\n        case dr:\n          edge = 'right';\n          break;\n        case dl:\n          edge = 'left';\n          break;\n        default:\n          throw 'unreachable';\n      }\n\n      // Compute how much the element can scroll in width and height.\n      let dsw = element.scrollWidth - element.clientWidth;\n      let dsh = element.scrollHeight - element.clientHeight;\n\n      // Determine if the element should be scrolled for the edge.\n      let shouldScroll: boolean;\n      switch (edge) {\n        case 'top':\n          shouldScroll = dsh > 0 && element.scrollTop > 0;\n          break;\n        case 'left':\n          shouldScroll = dsw > 0 && element.scrollLeft > 0;\n          break;\n        case 'right':\n          shouldScroll = dsw > 0 && element.scrollLeft < dsw;\n          break;\n        case 'bottom':\n          shouldScroll = dsh > 0 && element.scrollTop < dsh;\n          break;\n        default:\n          throw 'unreachable';\n      }\n\n      // Skip the element if it should not be scrolled.\n      if (!shouldScroll) {\n        continue;\n      }\n\n      // Return the drag scroll target.\n      return { element, edge, distance };\n    }\n\n    // No drag scroll target was found.\n    return null;\n  }\n\n  /**\n   * Dispatch a drag enter event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currElem - The currently indicated element, or `null`. This\n   *   is the \"immediate user selection\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The element to use as the current drag target. This is the\n   *   \"current target element\" from the whatwg spec, and may be `null`.\n   *\n   * #### Notes\n   * This largely implements the drag enter portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragEnter(\n    drag: Drag,\n    currElem: Element | null,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): Element | null {\n    // If the current element is null, return null as the new target.\n    if (!currElem) {\n      return null;\n    }\n\n    // Dispatch a drag enter event to the current element.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: currTarget,\n      type: 'lm-dragenter'\n    });\n    let canceled = !currElem.dispatchEvent(dragEvent);\n\n    // If the event was canceled, use the current element as the new target.\n    if (canceled) {\n      return currElem;\n    }\n\n    // If the current element is the document body, keep the original target.\n    const body =\n      drag.document instanceof Document\n        ? drag.document.body\n        : (drag.document.firstElementChild as HTMLElement);\n\n    if (currElem === body) {\n      return currTarget;\n    }\n\n    // Dispatch a drag enter event on the document body.\n    dragEvent = new Drag.Event(event, {\n      drag,\n      related: currTarget,\n      type: 'lm-dragenter'\n    });\n    body.dispatchEvent(dragEvent);\n\n    // Ignore the event cancellation, and use the body as the new target.\n    return body;\n  }\n\n  /**\n   * Dispatch a drag exit event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param prevTarget - The previous target element, or `null`. This\n   *   is the previous \"current target element\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * #### Notes\n   * This largely implements the drag exit portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragExit(\n    drag: Drag,\n    prevTarget: Element | null,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): void {\n    // If the previous target is null, do nothing.\n    if (!prevTarget) {\n      return;\n    }\n\n    // Dispatch the drag exit event to the previous target.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: currTarget,\n      type: 'lm-dragexit'\n    });\n    prevTarget.dispatchEvent(dragEvent);\n  }\n\n  /**\n   * Dispatch a drag leave event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param prevTarget - The previous target element, or `null`. This\n   *   is the previous \"current target element\" from the whatwg spec.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * #### Notes\n   * This largely implements the drag leave portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragLeave(\n    drag: Drag,\n    prevTarget: Element | null,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): void {\n    // If the previous target is null, do nothing.\n    if (!prevTarget) {\n      return;\n    }\n\n    // Dispatch the drag leave event to the previous target.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: currTarget,\n      type: 'lm-dragleave'\n    });\n    prevTarget.dispatchEvent(dragEvent);\n  }\n\n  /**\n   * Dispatch a drag over event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The `DropAction` result of the drag over event.\n   *\n   * #### Notes\n   * This largely implements the drag over portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDragOver(\n    drag: Drag,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): Drag.DropAction {\n    // If there is no current target, the drop action is none.\n    if (!currTarget) {\n      return 'none';\n    }\n\n    // Dispatch the drag over event to the current target.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: null,\n      type: 'lm-dragover'\n    });\n    let canceled = !currTarget.dispatchEvent(dragEvent);\n\n    // If the event was canceled, return the drop action result.\n    if (canceled) {\n      return dragEvent.dropAction;\n    }\n\n    // Otherwise, the effective drop action is none.\n    return 'none';\n  }\n\n  /**\n   * Dispatch a drop event to the indicated element.\n   *\n   * @param drag - The drag object associated with the action.\n   *\n   * @param currTarget - The current drag target element, or `null`. This\n   *   is the \"current target element\" from the whatwg spec.\n   *\n   * @param event - The mouse event related to the action.\n   *\n   * @returns The `DropAction` result of the drop event.\n   *\n   * #### Notes\n   * This largely implements the drag over portion of the whatwg spec:\n   * https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n   */\n  export function dispatchDrop(\n    drag: Drag,\n    currTarget: Element | null,\n    event: PointerEvent\n  ): Drag.DropAction {\n    // If there is no current target, the drop action is none.\n    if (!currTarget) {\n      return 'none';\n    }\n\n    // Dispatch the drop event to the current target.\n    let dragEvent = new Drag.Event(event, {\n      drag,\n      related: null,\n      type: 'lm-drop'\n    });\n    let canceled = !currTarget.dispatchEvent(dragEvent);\n\n    // If the event was canceled, return the drop action result.\n    if (canceled) {\n      return dragEvent.dropAction;\n    }\n\n    // Otherwise, the effective drop action is none.\n    return 'none';\n  }\n\n  /**\n   * A lookup table from drop action to bit value.\n   */\n  const actionTable: { [key: string]: number } = {\n    none: 0x0,\n    copy: 0x1,\n    link: 0x2,\n    move: 0x4\n  };\n\n  /**\n   * A lookup table from supported action to drop action bit mask.\n   */\n  const supportedTable: { [key: string]: number } = {\n    none: actionTable['none'],\n    copy: actionTable['copy'],\n    link: actionTable['link'],\n    move: actionTable['move'],\n    'copy-link': actionTable['copy'] | actionTable['link'],\n    'copy-move': actionTable['copy'] | actionTable['move'],\n    'link-move': actionTable['link'] | actionTable['move'],\n    all: actionTable['copy'] | actionTable['link'] | actionTable['move']\n  };\n\n  /**\n   * Implementation of `Drag.overrideCursor`.\n   */\n  export function overrideCursor(\n    cursor: string,\n    doc: Document | ShadowRoot = document\n  ): IDisposable {\n    let id = ++overrideCursorID;\n    const body =\n      doc instanceof Document\n        ? doc.body\n        : (doc.firstElementChild as HTMLElement);\n    if (!cursorBackdrop.isConnected) {\n      // Hide the backdrop until the pointer moves to avoid issues with\n      // native double click detection, used in e.g. datagrid editing.\n      cursorBackdrop.style.transform = 'scale(0)';\n      body.appendChild(cursorBackdrop);\n      resetBackdropScroll();\n      document.addEventListener('pointermove', alignBackdrop, {\n        capture: true,\n        passive: true\n      });\n      cursorBackdrop.addEventListener('scroll', propagateBackdropScroll, {\n        capture: true,\n        passive: true\n      });\n    }\n    cursorBackdrop.style.cursor = cursor;\n    return new DisposableDelegate(() => {\n      if (id === overrideCursorID && cursorBackdrop.isConnected) {\n        document.removeEventListener('pointermove', alignBackdrop, true);\n        cursorBackdrop.removeEventListener(\n          'scroll',\n          propagateBackdropScroll,\n          true\n        );\n        body.removeChild(cursorBackdrop);\n      }\n    });\n  }\n\n  /**\n   * Move cursor backdrop to match cursor position.\n   */\n  function alignBackdrop(event: PointerEvent) {\n    if (!cursorBackdrop) {\n      return;\n    }\n    cursorBackdrop.style.transform = `translate(${event.clientX}px, ${event.clientY}px)`;\n  }\n\n  /**\n   * Propagate the scroll event from the backdrop element to the scroll target.\n   * The scroll target is defined by presence of `data-lm-dragscroll` attribute.\n   */\n  function propagateBackdropScroll(_event: Event) {\n    if (!cursorBackdrop) {\n      return;\n    }\n    // Get the element under behind the centre of the cursor backdrop\n    // (essentially behind the cursor, but possibly a few pixels off).\n    let element: Element | null = findElementBehindBackdrop();\n    if (!element) {\n      return;\n    }\n    // Find scroll target.\n    const scrollTarget = element.closest('[data-lm-dragscroll]');\n    if (!scrollTarget) {\n      return;\n    }\n    // Apply the scroll delta to the correct target.\n    scrollTarget.scrollTop += cursorBackdrop.scrollTop - backdropScrollOrigin;\n    scrollTarget.scrollLeft += cursorBackdrop.scrollLeft - backdropScrollOrigin;\n\n    // Center the scroll position.\n    resetBackdropScroll();\n  }\n\n  /**\n   * Reset the backdrop scroll to allow further scrolling.\n   */\n  function resetBackdropScroll() {\n    cursorBackdrop.scrollTop = backdropScrollOrigin;\n    cursorBackdrop.scrollLeft = backdropScrollOrigin;\n  }\n\n  /**\n   * The center of the backdrop node scroll area.\n   */\n  const backdropScrollOrigin = 500;\n\n  /**\n   * Create cursor backdrop node.\n   */\n  function createCursorBackdrop(): HTMLElement {\n    const backdrop = document.createElement('div');\n    backdrop.classList.add('lm-cursor-backdrop');\n    return backdrop;\n  }\n\n  /**\n   * The internal id for the active cursor override.\n   */\n  let overrideCursorID = 0;\n\n  /**\n   * A backdrop node overriding pointer cursor.\n   *\n   * #### Notes\n   * We use a backdrop node rather than setting the cursor directly on the body\n   * because setting it on body requires more extensive style recalculation for\n   * reliable application of the cursor, this is the cursor not being overriden\n   * when over child elements with another style like `cursor: other!important`.\n   */\n  export const cursorBackdrop: HTMLElement = createCursorBackdrop();\n}\n"],"mappings":"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"}