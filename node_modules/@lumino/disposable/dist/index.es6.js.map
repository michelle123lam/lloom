{"version":3,"file":"index.es6.js","sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module disposable\n */\nimport { ISignal, Signal } from '@lumino/signaling';\n\n/**\n * An object which implements the disposable pattern.\n */\nexport interface IDisposable {\n  /**\n   * Test whether the object has been disposed.\n   *\n   * #### Notes\n   * This property is always safe to access.\n   */\n  readonly isDisposed: boolean;\n\n  /**\n   * Dispose of the resources held by the object.\n   *\n   * #### Notes\n   * If the object's `dispose` method is called more than once, all\n   * calls made after the first will be a no-op.\n   *\n   * #### Undefined Behavior\n   * It is undefined behavior to use any functionality of the object\n   * after it has been disposed unless otherwise explicitly noted.\n   */\n  dispose(): void;\n}\n\n/**\n * A disposable object with an observable `disposed` signal.\n */\nexport interface IObservableDisposable extends IDisposable {\n  /**\n   * A signal emitted when the object is disposed.\n   */\n  readonly disposed: ISignal<this, void>;\n}\n\n/**\n * A disposable object which delegates to a callback function.\n */\nexport class DisposableDelegate implements IDisposable {\n  /**\n   * Construct a new disposable delegate.\n   *\n   * @param fn - The callback function to invoke on dispose.\n   */\n  constructor(fn: () => void) {\n    this._fn = fn;\n  }\n\n  /**\n   * Test whether the delegate has been disposed.\n   */\n  get isDisposed(): boolean {\n    return !this._fn;\n  }\n\n  /**\n   * Dispose of the delegate and invoke the callback function.\n   */\n  dispose(): void {\n    if (!this._fn) {\n      return;\n    }\n    let fn = this._fn;\n    this._fn = null;\n    fn();\n  }\n\n  private _fn: (() => void) | null;\n}\n\n/**\n * An observable disposable object which delegates to a callback function.\n */\nexport class ObservableDisposableDelegate\n  extends DisposableDelegate\n  implements IObservableDisposable\n{\n  /**\n   * A signal emitted when the delegate is disposed.\n   */\n  get disposed(): ISignal<this, void> {\n    return this._disposed;\n  }\n\n  /**\n   * Dispose of the delegate and invoke the callback function.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._disposed.emit(undefined);\n    Signal.clearData(this);\n  }\n\n  private _disposed = new Signal<this, void>(this);\n}\n\n/**\n * An object which manages a collection of disposable items.\n */\nexport class DisposableSet implements IDisposable {\n  /**\n   * Test whether the set has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the set and the items it contains.\n   *\n   * #### Notes\n   * Items are disposed in the order they are added to the set.\n   */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._items.forEach(item => {\n      item.dispose();\n    });\n    this._items.clear();\n  }\n\n  /**\n   * Test whether the set contains a specific item.\n   *\n   * @param item - The item of interest.\n   *\n   * @returns `true` if the set contains the item, `false` otherwise.\n   */\n  contains(item: IDisposable): boolean {\n    return this._items.has(item);\n  }\n\n  /**\n   * Add a disposable item to the set.\n   *\n   * @param item - The item to add to the set.\n   *\n   * #### Notes\n   * If the item is already contained in the set, this is a no-op.\n   */\n  add(item: IDisposable): void {\n    this._items.add(item);\n  }\n\n  /**\n   * Remove a disposable item from the set.\n   *\n   * @param item - The item to remove from the set.\n   *\n   * #### Notes\n   * If the item is not contained in the set, this is a no-op.\n   */\n  remove(item: IDisposable): void {\n    this._items.delete(item);\n  }\n\n  /**\n   * Remove all items from the set.\n   */\n  clear(): void {\n    this._items.clear();\n  }\n\n  private _isDisposed = false;\n  private _items = new Set<IDisposable>();\n}\n\n/**\n * The namespace for the `DisposableSet` class statics.\n */\nexport namespace DisposableSet {\n  /**\n   * Create a disposable set from an iterable of items.\n   *\n   * @param items - The iterable object of interest.\n   *\n   * @returns A new disposable initialized with the given items.\n   */\n  export function from(items: Iterable<IDisposable>): DisposableSet {\n    let set = new DisposableSet();\n    for (const item of items) {\n      set.add(item);\n    }\n    return set;\n  }\n}\n\n/**\n * An observable object which manages a collection of disposable items.\n */\nexport class ObservableDisposableSet\n  extends DisposableSet\n  implements IObservableDisposable\n{\n  /**\n   * A signal emitted when the set is disposed.\n   */\n  get disposed(): ISignal<this, void> {\n    return this._disposed;\n  }\n\n  /**\n   * Dispose of the set and the items it contains.\n   *\n   * #### Notes\n   * Items are disposed in the order they are added to the set.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._disposed.emit(undefined);\n    Signal.clearData(this);\n  }\n\n  private _disposed = new Signal<this, void>(this);\n}\n\n/**\n * The namespace for the `ObservableDisposableSet` class statics.\n */\nexport namespace ObservableDisposableSet {\n  /**\n   * Create an observable disposable set from an iterable of items.\n   *\n   * @param items - The iterable object of interest.\n   *\n   * @returns A new disposable initialized with the given items.\n   */\n  export function from(items: Iterable<IDisposable>): ObservableDisposableSet {\n    let set = new ObservableDisposableSet();\n    for (const item of items) {\n      set.add(item);\n    }\n    return set;\n  }\n}\n"],"names":[],"mappings":"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"}