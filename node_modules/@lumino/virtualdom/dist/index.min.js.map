{"version":3,"names":["VirtualText","constructor","content","this","type","VirtualElement","tag","attrs","children","renderer","VirtualElementPass","super","undefined","h","i","n","arguments","length","arg","push","Array","extend","array","values","child","VirtualDOM","Private","a","bind","abbr","address","area","article","aside","audio","b","bdi","bdo","blockquote","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","dfn","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hr","iframe","img","input","ins","kbd","label","legend","li","main","map","mark","meter","nav","noscript","object","ol","optgroup","option","output","p","param","pre","progress","q","rp","rt","ruby","s","samp","section","select","small","source","span","strong","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var_","video","wbr","realize","node","createDOMNode","render","host","oldContent","hostMap","get","newContent","asContentArray","set","updateContent","before","insertBefore","document","createTextNode","createElement","element","name","specialAttrs","substr","setAttribute","className","htmlFor","dataset","addDataset","style","elemStyle","addStyle","addAttrs","removeContent","newCount","_sentinel","oldNode","lastChild","childNodes","unrender","removeChild","WeakMap","value","oldKeyed","firstChild","keyMap","Object","create","vNode","key","nextSibling","collectKeys","oldCopy","slice","currElem","oldVNode","newVNode","textContent","ArrayExt","insert","newKey","pair","move","indexOf","oldKey","updateAttrs","oldAttrs","newAttrs","removeAttribute","oldDataset","newDataset","updateDataset","oldStyle","newStyle","updateStyle","Error"],"sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module virtualdom\n */\nimport { ArrayExt } from '@lumino/algorithm';\n\n/**\n * The names of the supported HTML5 DOM element attributes.\n *\n * This list is not all-encompassing, rather it attempts to define the\n * attribute names which are relevant for use in a virtual DOM context.\n * If a standardized or widely supported name is missing, please open\n * an issue to have it added.\n *\n * The attribute names were collected from the following sources:\n *   - https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\n *   - https://www.w3.org/TR/html5/index.html#attributes-1\n *   - https://html.spec.whatwg.org/multipage/indices.html#attributes-3\n */\nexport type ElementAttrNames =\n  | 'abbr'\n  | 'accept'\n  | 'accept-charset'\n  | 'accesskey'\n  | 'action'\n  | 'allowfullscreen'\n  | 'alt'\n  | 'autocomplete'\n  | 'autofocus'\n  | 'autoplay'\n  | 'autosave'\n  | 'checked'\n  | 'cite'\n  | 'cols'\n  | 'colspan'\n  | 'contenteditable'\n  | 'controls'\n  | 'coords'\n  | 'crossorigin'\n  | 'data'\n  | 'datetime'\n  | 'default'\n  | 'dir'\n  | 'dirname'\n  | 'disabled'\n  | 'download'\n  | 'draggable'\n  | 'dropzone'\n  | 'enctype'\n  | 'form'\n  | 'formaction'\n  | 'formenctype'\n  | 'formmethod'\n  | 'formnovalidate'\n  | 'formtarget'\n  | 'headers'\n  | 'height'\n  | 'hidden'\n  | 'high'\n  | 'href'\n  | 'hreflang'\n  | 'id'\n  | 'inputmode'\n  | 'integrity'\n  | 'ismap'\n  | 'kind'\n  | 'label'\n  | 'lang'\n  | 'list'\n  | 'loop'\n  | 'low'\n  | 'max'\n  | 'maxlength'\n  | 'media'\n  | 'mediagroup'\n  | 'method'\n  | 'min'\n  | 'minlength'\n  | 'multiple'\n  | 'muted'\n  | 'name'\n  | 'novalidate'\n  | 'optimum'\n  | 'pattern'\n  | 'placeholder'\n  | 'poster'\n  | 'preload'\n  | 'readonly'\n  | 'rel'\n  | 'required'\n  | 'reversed'\n  | 'rows'\n  | 'rowspan'\n  | 'sandbox'\n  | 'scope'\n  | 'selected'\n  | 'shape'\n  | 'size'\n  | 'sizes'\n  | 'span'\n  | 'spellcheck'\n  | 'src'\n  | 'srcdoc'\n  | 'srclang'\n  | 'srcset'\n  | 'start'\n  | 'step'\n  | 'tabindex'\n  | 'target'\n  | 'title'\n  | 'type'\n  | 'typemustmatch'\n  | 'usemap'\n  | 'value'\n  | 'width'\n  | 'wrap';\n\n/**\n * The names of ARIA attributes for HTML elements.\n *\n * The attribute names are collected from\n * https://www.w3.org/TR/html5/infrastructure.html#element-attrdef-aria-role\n */\nexport type ARIAAttrNames =\n  | 'aria-activedescendant'\n  | 'aria-atomic'\n  | 'aria-autocomplete'\n  | 'aria-busy'\n  | 'aria-checked'\n  | 'aria-colcount'\n  | 'aria-colindex'\n  | 'aria-colspan'\n  | 'aria-controls'\n  | 'aria-current'\n  | 'aria-describedby'\n  | 'aria-details'\n  | 'aria-dialog'\n  | 'aria-disabled'\n  | 'aria-dropeffect'\n  | 'aria-errormessage'\n  | 'aria-expanded'\n  | 'aria-flowto'\n  | 'aria-grabbed'\n  | 'aria-haspopup'\n  | 'aria-hidden'\n  | 'aria-invalid'\n  | 'aria-keyshortcuts'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-level'\n  | 'aria-live'\n  | 'aria-multiline'\n  | 'aria-multiselectable'\n  | 'aria-orientation'\n  | 'aria-owns'\n  | 'aria-placeholder'\n  | 'aria-posinset'\n  | 'aria-pressed'\n  | 'aria-readonly'\n  | 'aria-relevant'\n  | 'aria-required'\n  | 'aria-roledescription'\n  | 'aria-rowcount'\n  | 'aria-rowindex'\n  | 'aria-rowspan'\n  | 'aria-selected'\n  | 'aria-setsize'\n  | 'aria-sort'\n  | 'aria-valuemax'\n  | 'aria-valuemin'\n  | 'aria-valuenow'\n  | 'aria-valuetext'\n  | 'role';\n\n/**\n * The names of the supported HTML5 CSS property names.\n *\n * If a standardized or widely supported name is missing, please open\n * an issue to have it added.\n *\n * The property names were collected from the following sources:\n *   - TypeScript's `lib.dom.d.ts` file\n */\nexport type CSSPropertyNames =\n  | 'alignContent'\n  | 'alignItems'\n  | 'alignSelf'\n  | 'alignmentBaseline'\n  | 'animation'\n  | 'animationDelay'\n  | 'animationDirection'\n  | 'animationDuration'\n  | 'animationFillMode'\n  | 'animationIterationCount'\n  | 'animationName'\n  | 'animationPlayState'\n  | 'animationTimingFunction'\n  | 'backfaceVisibility'\n  | 'background'\n  | 'backgroundAttachment'\n  | 'backgroundClip'\n  | 'backgroundColor'\n  | 'backgroundImage'\n  | 'backgroundOrigin'\n  | 'backgroundPosition'\n  | 'backgroundPositionX'\n  | 'backgroundPositionY'\n  | 'backgroundRepeat'\n  | 'backgroundSize'\n  | 'baselineShift'\n  | 'border'\n  | 'borderBottom'\n  | 'borderBottomColor'\n  | 'borderBottomLeftRadius'\n  | 'borderBottomRightRadius'\n  | 'borderBottomStyle'\n  | 'borderBottomWidth'\n  | 'borderCollapse'\n  | 'borderColor'\n  | 'borderImage'\n  | 'borderImageOutset'\n  | 'borderImageRepeat'\n  | 'borderImageSlice'\n  | 'borderImageSource'\n  | 'borderImageWidth'\n  | 'borderLeft'\n  | 'borderLeftColor'\n  | 'borderLeftStyle'\n  | 'borderLeftWidth'\n  | 'borderRadius'\n  | 'borderRight'\n  | 'borderRightColor'\n  | 'borderRightStyle'\n  | 'borderRightWidth'\n  | 'borderSpacing'\n  | 'borderStyle'\n  | 'borderTop'\n  | 'borderTopColor'\n  | 'borderTopLeftRadius'\n  | 'borderTopRightRadius'\n  | 'borderTopStyle'\n  | 'borderTopWidth'\n  | 'borderWidth'\n  | 'bottom'\n  | 'boxShadow'\n  | 'boxSizing'\n  | 'breakAfter'\n  | 'breakBefore'\n  | 'breakInside'\n  | 'captionSide'\n  | 'clear'\n  | 'clip'\n  | 'clipPath'\n  | 'clipRule'\n  | 'color'\n  | 'colorInterpolationFilters'\n  | 'columnCount'\n  | 'columnFill'\n  | 'columnGap'\n  | 'columnRule'\n  | 'columnRuleColor'\n  | 'columnRuleStyle'\n  | 'columnRuleWidth'\n  | 'columnSpan'\n  | 'columnWidth'\n  | 'columns'\n  | 'content'\n  | 'counterIncrement'\n  | 'counterReset'\n  | 'cssFloat'\n  | 'cssText'\n  | 'cursor'\n  | 'direction'\n  | 'display'\n  | 'dominantBaseline'\n  | 'emptyCells'\n  | 'enableBackground'\n  | 'fill'\n  | 'fillOpacity'\n  | 'fillRule'\n  | 'filter'\n  | 'flex'\n  | 'flexBasis'\n  | 'flexDirection'\n  | 'flexFlow'\n  | 'flexGrow'\n  | 'flexShrink'\n  | 'flexWrap'\n  | 'floodColor'\n  | 'floodOpacity'\n  | 'font'\n  | 'fontFamily'\n  | 'fontFeatureSettings'\n  | 'fontSize'\n  | 'fontSizeAdjust'\n  | 'fontStretch'\n  | 'fontStyle'\n  | 'fontVariant'\n  | 'fontWeight'\n  | 'glyphOrientationHorizontal'\n  | 'glyphOrientationVertical'\n  | 'height'\n  | 'imeMode'\n  | 'justifyContent'\n  | 'kerning'\n  | 'left'\n  | 'letterSpacing'\n  | 'lightingColor'\n  | 'lineHeight'\n  | 'listStyle'\n  | 'listStyleImage'\n  | 'listStylePosition'\n  | 'listStyleType'\n  | 'margin'\n  | 'marginBottom'\n  | 'marginLeft'\n  | 'marginRight'\n  | 'marginTop'\n  | 'marker'\n  | 'markerEnd'\n  | 'markerMid'\n  | 'markerStart'\n  | 'mask'\n  | 'maxHeight'\n  | 'maxWidth'\n  | 'minHeight'\n  | 'minWidth'\n  | 'msContentZoomChaining'\n  | 'msContentZoomLimit'\n  | 'msContentZoomLimitMax'\n  | 'msContentZoomLimitMin'\n  | 'msContentZoomSnap'\n  | 'msContentZoomSnapPoints'\n  | 'msContentZoomSnapType'\n  | 'msContentZooming'\n  | 'msFlowFrom'\n  | 'msFlowInto'\n  | 'msFontFeatureSettings'\n  | 'msGridColumn'\n  | 'msGridColumnAlign'\n  | 'msGridColumnSpan'\n  | 'msGridColumns'\n  | 'msGridRow'\n  | 'msGridRowAlign'\n  | 'msGridRowSpan'\n  | 'msGridRows'\n  | 'msHighContrastAdjust'\n  | 'msHyphenateLimitChars'\n  | 'msHyphenateLimitLines'\n  | 'msHyphenateLimitZone'\n  | 'msHyphens'\n  | 'msImeAlign'\n  | 'msOverflowStyle'\n  | 'msScrollChaining'\n  | 'msScrollLimit'\n  | 'msScrollLimitXMax'\n  | 'msScrollLimitXMin'\n  | 'msScrollLimitYMax'\n  | 'msScrollLimitYMin'\n  | 'msScrollRails'\n  | 'msScrollSnapPointsX'\n  | 'msScrollSnapPointsY'\n  | 'msScrollSnapType'\n  | 'msScrollSnapX'\n  | 'msScrollSnapY'\n  | 'msScrollTranslation'\n  | 'msTextCombineHorizontal'\n  | 'msTextSizeAdjust'\n  | 'msTouchAction'\n  | 'msTouchSelect'\n  | 'msUserSelect'\n  | 'msWrapFlow'\n  | 'msWrapMargin'\n  | 'msWrapThrough'\n  | 'opacity'\n  | 'order'\n  | 'orphans'\n  | 'outline'\n  | 'outlineColor'\n  | 'outlineStyle'\n  | 'outlineWidth'\n  | 'overflow'\n  | 'overflowX'\n  | 'overflowY'\n  | 'padding'\n  | 'paddingBottom'\n  | 'paddingLeft'\n  | 'paddingRight'\n  | 'paddingTop'\n  | 'pageBreakAfter'\n  | 'pageBreakBefore'\n  | 'pageBreakInside'\n  | 'perspective'\n  | 'perspectiveOrigin'\n  | 'pointerEvents'\n  | 'position'\n  | 'quotes'\n  | 'resize'\n  | 'right'\n  | 'rubyAlign'\n  | 'rubyOverhang'\n  | 'rubyPosition'\n  | 'stopColor'\n  | 'stopOpacity'\n  | 'stroke'\n  | 'strokeDasharray'\n  | 'strokeDashoffset'\n  | 'strokeLinecap'\n  | 'strokeLinejoin'\n  | 'strokeMiterlimit'\n  | 'strokeOpacity'\n  | 'strokeWidth'\n  | 'tableLayout'\n  | 'textAlign'\n  | 'textAlignLast'\n  | 'textAnchor'\n  | 'textDecoration'\n  | 'textIndent'\n  | 'textJustify'\n  | 'textKashida'\n  | 'textKashidaSpace'\n  | 'textOverflow'\n  | 'textShadow'\n  | 'textTransform'\n  | 'textUnderlinePosition'\n  | 'top'\n  | 'touchAction'\n  | 'transform'\n  | 'transformOrigin'\n  | 'transformStyle'\n  | 'transition'\n  | 'transitionDelay'\n  | 'transitionDuration'\n  | 'transitionProperty'\n  | 'transitionTimingFunction'\n  | 'unicodeBidi'\n  | 'verticalAlign'\n  | 'visibility'\n  | 'webkitAlignContent'\n  | 'webkitAlignItems'\n  | 'webkitAlignSelf'\n  | 'webkitAnimation'\n  | 'webkitAnimationDelay'\n  | 'webkitAnimationDirection'\n  | 'webkitAnimationDuration'\n  | 'webkitAnimationFillMode'\n  | 'webkitAnimationIterationCount'\n  | 'webkitAnimationName'\n  | 'webkitAnimationPlayState'\n  | 'webkitAnimationTimingFunction'\n  | 'webkitAppearance'\n  | 'webkitBackfaceVisibility'\n  | 'webkitBackgroundClip'\n  | 'webkitBackgroundOrigin'\n  | 'webkitBackgroundSize'\n  | 'webkitBorderBottomLeftRadius'\n  | 'webkitBorderBottomRightRadius'\n  | 'webkitBorderImage'\n  | 'webkitBorderRadius'\n  | 'webkitBorderTopLeftRadius'\n  | 'webkitBorderTopRightRadius'\n  | 'webkitBoxAlign'\n  | 'webkitBoxDirection'\n  | 'webkitBoxFlex'\n  | 'webkitBoxOrdinalGroup'\n  | 'webkitBoxOrient'\n  | 'webkitBoxPack'\n  | 'webkitBoxSizing'\n  | 'webkitColumnBreakAfter'\n  | 'webkitColumnBreakBefore'\n  | 'webkitColumnBreakInside'\n  | 'webkitColumnCount'\n  | 'webkitColumnGap'\n  | 'webkitColumnRule'\n  | 'webkitColumnRuleColor'\n  | 'webkitColumnRuleStyle'\n  | 'webkitColumnRuleWidth'\n  | 'webkitColumnSpan'\n  | 'webkitColumnWidth'\n  | 'webkitColumns'\n  | 'webkitFilter'\n  | 'webkitFlex'\n  | 'webkitFlexBasis'\n  | 'webkitFlexDirection'\n  | 'webkitFlexFlow'\n  | 'webkitFlexGrow'\n  | 'webkitFlexShrink'\n  | 'webkitFlexWrap'\n  | 'webkitJustifyContent'\n  | 'webkitOrder'\n  | 'webkitPerspective'\n  | 'webkitPerspectiveOrigin'\n  | 'webkitTapHighlightColor'\n  | 'webkitTextFillColor'\n  | 'webkitTextSizeAdjust'\n  | 'webkitTransform'\n  | 'webkitTransformOrigin'\n  | 'webkitTransformStyle'\n  | 'webkitTransition'\n  | 'webkitTransitionDelay'\n  | 'webkitTransitionDuration'\n  | 'webkitTransitionProperty'\n  | 'webkitTransitionTimingFunction'\n  | 'webkitUserModify'\n  | 'webkitUserSelect'\n  | 'webkitWritingMode'\n  | 'whiteSpace'\n  | 'widows'\n  | 'width'\n  | 'wordBreak'\n  | 'wordSpacing'\n  | 'wordWrap'\n  | 'writingMode'\n  | 'zIndex'\n  | 'zoom';\n\n/**\n * A mapping of inline event name to event object type.\n *\n * This mapping is used to create the event listener properties for\n * the virtual DOM element attributes object. If a standardized or\n * widely supported name is missing, please open an issue to have it\n * added.\n *\n * The event names were collected from the following sources:\n *   - TypeScript's `lib.dom.d.ts` file\n *   - https://www.w3.org/TR/html5/index.html#attributes-1\n *   - https://html.spec.whatwg.org/multipage/webappapis.html#idl-definitions\n */\nexport type ElementEventMap = {\n  onabort: UIEvent;\n  onauxclick: MouseEvent;\n  onblur: FocusEvent;\n  oncanplay: Event;\n  oncanplaythrough: Event;\n  onchange: Event;\n  onclick: MouseEvent;\n  oncontextmenu: PointerEvent;\n  oncopy: ClipboardEvent;\n  oncuechange: Event;\n  oncut: ClipboardEvent;\n  ondblclick: MouseEvent;\n  ondrag: DragEvent;\n  ondragend: DragEvent;\n  ondragenter: DragEvent;\n  ondragexit: DragEvent;\n  ondragleave: DragEvent;\n  ondragover: DragEvent;\n  ondragstart: DragEvent;\n  ondrop: DragEvent;\n  ondurationchange: Event;\n  onemptied: Event;\n  onended: ErrorEvent;\n  onerror: ErrorEvent;\n  onfocus: FocusEvent;\n  oninput: Event;\n  oninvalid: Event;\n  onkeydown: KeyboardEvent;\n  onkeypress: KeyboardEvent;\n  onkeyup: KeyboardEvent;\n  onload: Event;\n  onloadeddata: Event;\n  onloadedmetadata: Event;\n  onloadend: Event;\n  onloadstart: Event;\n  onmousedown: MouseEvent;\n  onmouseenter: MouseEvent;\n  onmouseleave: MouseEvent;\n  onmousemove: MouseEvent;\n  onmouseout: MouseEvent;\n  onmouseover: MouseEvent;\n  onmouseup: MouseEvent;\n  onmousewheel: WheelEvent;\n  onpaste: ClipboardEvent;\n  onpause: Event;\n  onplay: Event;\n  onplaying: Event;\n  onpointercancel: PointerEvent;\n  onpointerdown: PointerEvent;\n  onpointerenter: PointerEvent;\n  onpointerleave: PointerEvent;\n  onpointermove: PointerEvent;\n  onpointerout: PointerEvent;\n  onpointerover: PointerEvent;\n  onpointerup: PointerEvent;\n  onprogress: ProgressEvent;\n  onratechange: Event;\n  onreset: Event;\n  onscroll: UIEvent;\n  onseeked: Event;\n  onseeking: Event;\n  onselect: UIEvent;\n  onselectstart: Event;\n  onstalled: Event;\n  onsubmit: Event;\n  onsuspend: Event;\n  ontimeupdate: Event;\n  onvolumechange: Event;\n  onwaiting: Event;\n};\n\n/**\n * An object which represents a dataset for a virtual DOM element.\n *\n * The names of the dataset properties will be automatically prefixed\n * with `data-` before being added to the node, e.g. `{ thing: '12' }`\n * will be rendered as `data-thing='12'` in the DOM element.\n *\n * Dataset property names should not contain spaces.\n */\nexport type ElementDataset = {\n  readonly [name: string]: string;\n};\n\n/**\n * The inline style for for a virtual DOM element.\n *\n * Style attributes use the JS camel-cased property names instead of\n * the CSS hyphenated names for performance and security.\n */\nexport type ElementInlineStyle = {\n  readonly [T in CSSPropertyNames]?: string;\n};\n\n/**\n * The ARIA attributes for a virtual element node.\n *\n * These are the attributes which are applied to a real DOM element via\n * `element.setAttribute()`. The supported attribute names are defined\n * by the `ARIAAttrNames` type.\n */\nexport type ElementARIAAttrs = {\n  readonly [T in ARIAAttrNames]?: string;\n};\n\n/**\n * The base attributes for a virtual element node.\n *\n * These are the attributes which are applied to a real DOM element via\n * `element.setAttribute()`. The supported attribute names are defined\n * by the `ElementAttrNames` type.\n *\n * Node attributes are specified using the lower-case HTML name instead\n * of the camel-case JS name due to browser inconsistencies in handling\n * the JS versions.\n */\nexport type ElementBaseAttrs = {\n  readonly [T in ElementAttrNames]?: string;\n};\n\n/**\n * The inline event listener attributes for a virtual element node.\n *\n * The supported listeners are defined by the `ElementEventMap` type.\n */\nexport type ElementEventAttrs = {\n  readonly [T in keyof ElementEventMap]?: (\n    this: HTMLElement,\n    event: ElementEventMap[T]\n  ) => any;\n};\n\n/**\n * The special-cased attributes for a virtual element node.\n */\nexport type ElementSpecialAttrs = {\n  /**\n   * The key id for the virtual element node.\n   *\n   * If a node is given a key id, the generated DOM node will not be\n   * recreated during a rendering update if it only moves among its\n   * siblings in the render tree.\n   *\n   * In general, reordering child nodes will cause the nodes to be\n   * completely re-rendered. Keys allow this to be optimized away.\n   *\n   * If a key is provided, it must be unique among sibling nodes.\n   */\n  readonly key?: string;\n\n  /**\n   * The JS-safe name for the HTML `class` attribute.\n   */\n  readonly className?: string;\n\n  /**\n   * The JS-safe name for the HTML `for` attribute.\n   */\n  readonly htmlFor?: string;\n\n  /**\n   * The dataset for the rendered DOM element.\n   */\n  readonly dataset?: ElementDataset;\n\n  /**\n   * The inline style for the rendered DOM element.\n   */\n  readonly style?: ElementInlineStyle;\n};\n\n/**\n * The full set of attributes supported by a virtual element node.\n *\n * This is the combination of the base element attributes, the the ARIA attributes,\n * the inline element event listeners, and the special element attributes.\n */\nexport type ElementAttrs = ElementBaseAttrs &\n  ElementARIAAttrs &\n  ElementEventAttrs &\n  ElementSpecialAttrs;\n\n/**\n * A virtual node which represents plain text content.\n *\n * #### Notes\n * User code will not typically create a `VirtualText` node directly.\n * Instead, the `h()` function will be used to create an element tree.\n */\nexport class VirtualText {\n  /**\n   * The text content for the node.\n   */\n  readonly content: string;\n\n  /**\n   * The type of the node.\n   *\n   * This value can be used as a type guard for discriminating the\n   * `VirtualNode` union type.\n   */\n  readonly type = 'text' as const;\n\n  /**\n   * Construct a new virtual text node.\n   *\n   * @param content - The text content for the node.\n   */\n  constructor(content: string) {\n    this.content = content;\n  }\n}\n\n/**\n * A virtual node which represents an HTML element.\n *\n * #### Notes\n * User code will not typically create a `VirtualElement` node directly.\n * Instead, the `h()` function will be used to create an element tree.\n */\nexport class VirtualElement {\n  /**\n   * The tag name for the element.\n   */\n  readonly tag: string;\n\n  /**\n   * The attributes for the element.\n   */\n  readonly attrs: ElementAttrs;\n\n  /**\n   * The children for the element.\n   */\n  readonly children: ReadonlyArray<VirtualNode>;\n\n  /**\n   * An optional custom renderer for the element's children. If set, on render\n   * this element's DOM node and it's attrs will be created/updated as normal.\n   * At that point the DOM node is handed off to the renderer.\n   */\n  readonly renderer: VirtualElement.IRenderer | undefined;\n\n  /**\n   * The type of the node.\n   *\n   * This value can be used as a type guard for discriminating the\n   * `VirtualNode` union type.\n   */\n  readonly type = 'element' as const;\n\n  /**\n   * Construct a new virtual element node.\n   *\n   * @param tag - The element tag name.\n   *\n   * @param attrs - The element attributes.\n   *\n   * @param children - The element children.\n   *\n   * @param renderer - An optional custom renderer for the element.\n   */\n  constructor(\n    tag: string,\n    attrs: ElementAttrs,\n    children: ReadonlyArray<VirtualNode>,\n    renderer?: VirtualElement.IRenderer\n  ) {\n    this.tag = tag;\n    this.attrs = attrs;\n    this.children = children;\n\n    this.renderer = renderer;\n  }\n}\n\nexport namespace VirtualElement {\n  /**\n   * A type describing a custom element renderer\n   */\n  export type IRenderer = {\n    /**\n     * Customize how a DOM node is rendered. If .renderer is set on a given\n     * instance of VirtualElement, this function will be called every time\n     * that VirtualElement is rendered.\n     *\n     * @param host - The actual DOM node created for a VirtualElement during\n     * rendering.\n     *\n     * On render, host is created and its attrs are set/updated via\n     * the standard routines in updateContent. host is then handed off to this\n     * function.\n     *\n     * The render function is free to modify host. The only restriction is\n     * is that render should not modify any attributes set by external\n     * routines (ie updateContent), as this may cause thrashing when the\n     * virtual element is next rendered.\n     *\n     * @param options - Will be populated with the .attrs and .children fields\n     * set on the VirtualElement being rendered.\n     */\n    render: (\n      host: HTMLElement,\n      options?: { attrs?: ElementAttrs; children?: ReadonlyArray<VirtualNode> }\n    ) => void;\n\n    /**\n     * Optional cleanup function for custom renderers. If the .renderer field\n     * of a VirtualELement is set, and if .renderer.unrender is defined, when\n     * the element is changed or removed its corresponding DOM element will be\n     * passed to this function immediately before it is removed from the DOM.\n     *\n     * unrender is not required for for simple renderers, such as those\n     * implemented using `document.createElement()`. However, for certain\n     * rendering techniques explicit cleanup is required in order to avoid\n     * resource leaks.\n     *\n     * For example, if render calls `ReactDOM.render(..., host)`, then\n     * there has to also be a corresponding implementation of unrender that\n     * calls `ReactDOM.unmountComponentAtNode(host)` in order to prevent\n     * a memory leak.\n     *\n     * @param host - the DOM element to be removed.\n     *\n     * @param options - Will be populated with the .attrs and .children fields\n     * set on the VirtualElement being unrendered.\n     */\n    unrender?: (\n      host: HTMLElement,\n      options?: { attrs?: ElementAttrs; children?: ReadonlyArray<VirtualNode> }\n    ) => void;\n  };\n}\n\n/**\n * DEPRECATED - use VirtualElement with a defined renderer param instead.\n * This class is provided as a backwards compatibility shim\n *\n * A \"pass thru\" virtual node whose children are managed by a render and an\n * unrender callback. The intent of this flavor of virtual node is to make\n * it easy to blend other kinds of virtualdom (eg React) into Phosphor's\n * virtualdom.\n *\n * #### Notes\n * User code will not typically create a `VirtualElementPass` node directly.\n * Instead, the `hpass()` function will be used to create an element tree.\n */\nexport class VirtualElementPass extends VirtualElement {\n  /**\n   * DEPRECATED - use VirtualElement with a defined renderer param instead\n   *\n   * Construct a new virtual element pass thru node.\n   *\n   * @param tag - the tag of the parent element of this node. Once the parent\n   * element is rendered, it will be passed as an argument to\n   * renderer.render\n   *\n   * @param attrs - attributes that will assigned to the\n   * parent element\n   *\n   * @param renderer - an object with render and unrender\n   * functions, each of which should take a single argument of type\n   * HTMLElement and return nothing. If null, the parent element\n   * will be rendered barren without any children.\n   */\n  constructor(\n    tag: string,\n    attrs: ElementAttrs,\n    renderer: VirtualElementPass.IRenderer | null\n  ) {\n    super(tag, attrs, [], renderer || undefined);\n  }\n}\n\nexport namespace VirtualElementPass {\n  /**\n   * DEPRECATED - use VirtualElement.IRenderer instead\n   *\n   * A type describing a custom element renderer\n   */\n  export type IRenderer = VirtualElement.IRenderer;\n}\n\n/**\n * A type alias for a general virtual node.\n */\nexport type VirtualNode = VirtualElement | VirtualText;\n\n/**\n * Create a new virtual element node.\n *\n * @param tag - The tag name for the element.\n *\n * @param attrs - The attributes for the element, if any.\n *\n * @param renderer - An optional custom renderer for the element.\n *\n * @param children - The children for the element, if any.\n *\n * @returns A new virtual element node for the given parameters.\n *\n * #### Notes\n * The children may be string literals, other virtual nodes, `null`, or\n * an array of those things. Strings are converted into text nodes, and\n * arrays are inlined as if the array contents were given as positional\n * arguments. This makes it simple to build up an array of children by\n * any desired means. `null` child values are simply ignored.\n *\n * A bound function for each HTML tag name is available as a static\n * function attached to the `h()` function. E.g. `h('div', ...)` is\n * equivalent to `h.div(...)`.\n */\nexport function h(tag: string, ...children: h.Child[]): VirtualElement;\nexport function h(\n  tag: string,\n  attrs: ElementAttrs,\n  ...children: h.Child[]\n): VirtualElement;\nexport function h(\n  tag: string,\n  renderer: VirtualElement.IRenderer,\n  ...children: h.Child[]\n): VirtualElement;\nexport function h(\n  tag: string,\n  attrs: ElementAttrs,\n  renderer: VirtualElement.IRenderer,\n  ...children: h.Child[]\n): VirtualElement;\nexport function h(tag: string): VirtualElement {\n  let attrs: ElementAttrs = {};\n  let renderer: VirtualElement.IRenderer | undefined;\n  let children: VirtualNode[] = [];\n  for (let i = 1, n = arguments.length; i < n; ++i) {\n    // eslint-disable-next-line prefer-rest-params\n    let arg = arguments[i];\n    if (typeof arg === 'string') {\n      children.push(new VirtualText(arg));\n    } else if (arg instanceof VirtualText) {\n      children.push(arg);\n    } else if (arg instanceof VirtualElement) {\n      children.push(arg);\n    } else if (arg instanceof Array) {\n      extend(children, arg);\n    } else if ((i === 1 || i === 2) && arg && typeof arg === 'object') {\n      if ('render' in arg) {\n        renderer = arg;\n      } else {\n        attrs = arg;\n      }\n    }\n  }\n  return new VirtualElement(tag, attrs, children, renderer);\n\n  function extend(array: VirtualNode[], values: h.Child[]): void {\n    for (let child of values) {\n      if (typeof child === 'string') {\n        array.push(new VirtualText(child));\n      } else if (child instanceof VirtualText) {\n        array.push(child);\n      } else if (child instanceof VirtualElement) {\n        array.push(child);\n      }\n    }\n  }\n}\n\n/**\n * The namespace for the `h` function statics.\n */\nexport namespace h {\n  /**\n   * A type alias for the supported child argument types.\n   */\n  export type Child =\n    | (string | VirtualNode | null)\n    | Array<string | VirtualNode | null>;\n\n  /**\n   * A bound factory function for a specific `h()` tag.\n   */\n  export interface IFactory {\n    (...children: Child[]): VirtualElement;\n    (attrs: ElementAttrs, ...children: Child[]): VirtualElement;\n    (\n      renderer: VirtualElement.IRenderer,\n      ...children: h.Child[]\n    ): VirtualElement;\n    (\n      attrs: ElementAttrs,\n      renderer: VirtualElement.IRenderer,\n      ...children: h.Child[]\n    ): VirtualElement;\n  }\n\n  export const a: IFactory = h.bind(undefined, 'a');\n  export const abbr: IFactory = h.bind(undefined, 'abbr');\n  export const address: IFactory = h.bind(undefined, 'address');\n  export const area: IFactory = h.bind(undefined, 'area');\n  export const article: IFactory = h.bind(undefined, 'article');\n  export const aside: IFactory = h.bind(undefined, 'aside');\n  export const audio: IFactory = h.bind(undefined, 'audio');\n  export const b: IFactory = h.bind(undefined, 'b');\n  export const bdi: IFactory = h.bind(undefined, 'bdi');\n  export const bdo: IFactory = h.bind(undefined, 'bdo');\n  export const blockquote: IFactory = h.bind(undefined, 'blockquote');\n  export const br: IFactory = h.bind(undefined, 'br');\n  export const button: IFactory = h.bind(undefined, 'button');\n  export const canvas: IFactory = h.bind(undefined, 'canvas');\n  export const caption: IFactory = h.bind(undefined, 'caption');\n  export const cite: IFactory = h.bind(undefined, 'cite');\n  export const code: IFactory = h.bind(undefined, 'code');\n  export const col: IFactory = h.bind(undefined, 'col');\n  export const colgroup: IFactory = h.bind(undefined, 'colgroup');\n  export const data: IFactory = h.bind(undefined, 'data');\n  export const datalist: IFactory = h.bind(undefined, 'datalist');\n  export const dd: IFactory = h.bind(undefined, 'dd');\n  export const del: IFactory = h.bind(undefined, 'del');\n  export const dfn: IFactory = h.bind(undefined, 'dfn');\n  export const div: IFactory = h.bind(undefined, 'div');\n  export const dl: IFactory = h.bind(undefined, 'dl');\n  export const dt: IFactory = h.bind(undefined, 'dt');\n  export const em: IFactory = h.bind(undefined, 'em');\n  export const embed: IFactory = h.bind(undefined, 'embed');\n  export const fieldset: IFactory = h.bind(undefined, 'fieldset');\n  export const figcaption: IFactory = h.bind(undefined, 'figcaption');\n  export const figure: IFactory = h.bind(undefined, 'figure');\n  export const footer: IFactory = h.bind(undefined, 'footer');\n  export const form: IFactory = h.bind(undefined, 'form');\n  export const h1: IFactory = h.bind(undefined, 'h1');\n  export const h2: IFactory = h.bind(undefined, 'h2');\n  export const h3: IFactory = h.bind(undefined, 'h3');\n  export const h4: IFactory = h.bind(undefined, 'h4');\n  export const h5: IFactory = h.bind(undefined, 'h5');\n  export const h6: IFactory = h.bind(undefined, 'h6');\n  export const header: IFactory = h.bind(undefined, 'header');\n  export const hr: IFactory = h.bind(undefined, 'hr');\n  export const i: IFactory = h.bind(undefined, 'i');\n  export const iframe: IFactory = h.bind(undefined, 'iframe');\n  export const img: IFactory = h.bind(undefined, 'img');\n  export const input: IFactory = h.bind(undefined, 'input');\n  export const ins: IFactory = h.bind(undefined, 'ins');\n  export const kbd: IFactory = h.bind(undefined, 'kbd');\n  export const label: IFactory = h.bind(undefined, 'label');\n  export const legend: IFactory = h.bind(undefined, 'legend');\n  export const li: IFactory = h.bind(undefined, 'li');\n  export const main: IFactory = h.bind(undefined, 'main');\n  export const map: IFactory = h.bind(undefined, 'map');\n  export const mark: IFactory = h.bind(undefined, 'mark');\n  export const meter: IFactory = h.bind(undefined, 'meter');\n  export const nav: IFactory = h.bind(undefined, 'nav');\n  export const noscript: IFactory = h.bind(undefined, 'noscript');\n  export const object: IFactory = h.bind(undefined, 'object');\n  export const ol: IFactory = h.bind(undefined, 'ol');\n  export const optgroup: IFactory = h.bind(undefined, 'optgroup');\n  export const option: IFactory = h.bind(undefined, 'option');\n  export const output: IFactory = h.bind(undefined, 'output');\n  export const p: IFactory = h.bind(undefined, 'p');\n  export const param: IFactory = h.bind(undefined, 'param');\n  export const pre: IFactory = h.bind(undefined, 'pre');\n  export const progress: IFactory = h.bind(undefined, 'progress');\n  export const q: IFactory = h.bind(undefined, 'q');\n  export const rp: IFactory = h.bind(undefined, 'rp');\n  export const rt: IFactory = h.bind(undefined, 'rt');\n  export const ruby: IFactory = h.bind(undefined, 'ruby');\n  export const s: IFactory = h.bind(undefined, 's');\n  export const samp: IFactory = h.bind(undefined, 'samp');\n  export const section: IFactory = h.bind(undefined, 'section');\n  export const select: IFactory = h.bind(undefined, 'select');\n  export const small: IFactory = h.bind(undefined, 'small');\n  export const source: IFactory = h.bind(undefined, 'source');\n  export const span: IFactory = h.bind(undefined, 'span');\n  export const strong: IFactory = h.bind(undefined, 'strong');\n  export const sub: IFactory = h.bind(undefined, 'sub');\n  export const summary: IFactory = h.bind(undefined, 'summary');\n  export const sup: IFactory = h.bind(undefined, 'sup');\n  export const table: IFactory = h.bind(undefined, 'table');\n  export const tbody: IFactory = h.bind(undefined, 'tbody');\n  export const td: IFactory = h.bind(undefined, 'td');\n  export const textarea: IFactory = h.bind(undefined, 'textarea');\n  export const tfoot: IFactory = h.bind(undefined, 'tfoot');\n  export const th: IFactory = h.bind(undefined, 'th');\n  export const thead: IFactory = h.bind(undefined, 'thead');\n  export const time: IFactory = h.bind(undefined, 'time');\n  export const title: IFactory = h.bind(undefined, 'title');\n  export const tr: IFactory = h.bind(undefined, 'tr');\n  export const track: IFactory = h.bind(undefined, 'track');\n  export const u: IFactory = h.bind(undefined, 'u');\n  export const ul: IFactory = h.bind(undefined, 'ul');\n  export const var_: IFactory = h.bind(undefined, 'var');\n  export const video: IFactory = h.bind(undefined, 'video');\n  export const wbr: IFactory = h.bind(undefined, 'wbr');\n}\n\n/**\n * DEPRECATED - pass the renderer arg to the h function instead\n *\n * Create a new \"pass thru\" virtual element node.\n *\n * @param tag - The tag name for the parent element.\n *\n * @param attrs - The attributes for the parent element, if any.\n *\n * @param renderer - an object with render and unrender functions, if any.\n *\n * @returns A new \"pass thru\" virtual element node for the given parameters.\n *\n */\nexport function hpass(\n  tag: string,\n  renderer?: VirtualElementPass.IRenderer\n): VirtualElementPass;\nexport function hpass(\n  tag: string,\n  attrs: ElementAttrs,\n  renderer?: VirtualElementPass.IRenderer\n): VirtualElementPass;\nexport function hpass(tag: string): VirtualElementPass {\n  let attrs: ElementAttrs = {};\n  let renderer: VirtualElementPass.IRenderer | null = null;\n\n  if (arguments.length === 2) {\n    // eslint-disable-next-line prefer-rest-params\n    const arg = arguments[1];\n\n    if ('render' in arg) {\n      renderer = arg;\n    } else {\n      attrs = arg;\n    }\n  } else if (arguments.length === 3) {\n    // eslint-disable-next-line prefer-rest-params\n    attrs = arguments[1];\n    // eslint-disable-next-line prefer-rest-params\n    renderer = arguments[2];\n  } else if (arguments.length > 3) {\n    throw new Error('hpass() should be called with 1, 2, or 3 arguments');\n  }\n\n  return new VirtualElementPass(tag, attrs, renderer);\n}\n\n/**\n * The namespace for the virtual DOM rendering functions.\n */\nexport namespace VirtualDOM {\n  /**\n   * Create a real DOM element from a virtual element node.\n   *\n   * @param node - The virtual element node to realize.\n   *\n   * @returns A new DOM element for the given virtual element node.\n   *\n   * #### Notes\n   * This creates a brand new *real* DOM element with a structure which\n   * matches the given virtual DOM node.\n   *\n   * If virtual diffing is desired, use the `render` function instead.\n   */\n  export function realize(node: VirtualText): Text;\n  export function realize(node: VirtualElement): HTMLElement;\n  export function realize(node: VirtualNode): HTMLElement | Text {\n    return Private.createDOMNode(node);\n  }\n\n  /**\n   * Render virtual DOM content into a host element.\n   *\n   * @param content - The virtual DOM content to render.\n   *\n   * @param host - The host element for the rendered content.\n   *\n   * #### Notes\n   * This renders the delta from the previous rendering. It assumes that\n   * the content of the host element is not manipulated by external code.\n   *\n   * Providing `null` content will clear the rendering.\n   *\n   * Externally modifying the provided content or the host element will\n   * result in undefined rendering behavior.\n   */\n  export function render(\n    content: VirtualNode | ReadonlyArray<VirtualNode> | null,\n    host: HTMLElement\n  ): void {\n    let oldContent = Private.hostMap.get(host) || [];\n    let newContent = Private.asContentArray(content);\n    Private.hostMap.set(host, newContent);\n    Private.updateContent(host, oldContent, newContent);\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A weak mapping of host element to virtual DOM content.\n   */\n  export const hostMap = new WeakMap<HTMLElement, ReadonlyArray<VirtualNode>>();\n\n  /**\n   * Cast a content value to a content array.\n   */\n  export function asContentArray(\n    value: VirtualNode | ReadonlyArray<VirtualNode> | null\n  ): ReadonlyArray<VirtualNode> {\n    if (!value) {\n      return [];\n    }\n    if (value instanceof Array) {\n      return value as ReadonlyArray<VirtualNode>;\n    }\n    return [value as VirtualNode];\n  }\n\n  /**\n   * Create a new DOM element for a virtual node.\n   */\n  export function createDOMNode(node: VirtualText): Text;\n  export function createDOMNode(node: VirtualElement): HTMLElement;\n  export function createDOMNode(node: VirtualNode): HTMLElement | Text;\n  export function createDOMNode(\n    node: VirtualNode,\n    host: HTMLElement | null\n  ): HTMLElement | Text;\n  export function createDOMNode(\n    node: VirtualNode,\n    host: HTMLElement | null,\n    before: Node | null\n  ): HTMLElement | Text;\n  export function createDOMNode(node: VirtualNode): HTMLElement | Text {\n    // eslint-disable-next-line prefer-rest-params\n    let host = arguments[1] || null;\n    // eslint-disable-next-line prefer-rest-params\n    const before = arguments[2] || null;\n\n    if (host) {\n      host.insertBefore(createDOMNode(node), before);\n    } else {\n      // Create a text node for a virtual text node.\n      if (node.type === 'text') {\n        return document.createTextNode(node.content);\n      }\n\n      // Create the HTML element with the specified tag.\n      host = document.createElement(node.tag);\n\n      // Add the attributes for the new element.\n      addAttrs(host, node.attrs);\n\n      if (node.renderer) {\n        node.renderer.render(host, {\n          attrs: node.attrs,\n          children: node.children\n        });\n        return host;\n      }\n\n      // Recursively populate the element with child content.\n      for (let i = 0, n = node.children.length; i < n; ++i) {\n        createDOMNode(node.children[i], host);\n      }\n    }\n\n    return host;\n  }\n\n  /**\n   * Update a host element with the delta of the virtual content.\n   *\n   * This is the core \"diff\" algorithm. There is no explicit \"patch\"\n   * phase. The host is patched at each step as the diff progresses.\n   */\n  export function updateContent(\n    host: HTMLElement,\n    oldContent: ReadonlyArray<VirtualNode>,\n    newContent: ReadonlyArray<VirtualNode>\n  ): void {\n    // Bail early if the content is identical.\n    if (oldContent === newContent) {\n      return;\n    }\n\n    // Collect the old keyed elems into a mapping.\n    let oldKeyed = collectKeys(host, oldContent);\n\n    // Create a copy of the old content which can be modified in-place.\n    let oldCopy = oldContent.slice();\n\n    // Update the host with the new content. The diff always proceeds\n    // forward and never modifies a previously visited index. The old\n    // copy array is modified in-place to reflect the changes made to\n    // the host children. This causes the stale nodes to be pushed to\n    // the end of the host node and removed at the end of the loop.\n    let currElem = host.firstChild;\n    let newCount = newContent.length;\n    for (let i = 0; i < newCount; ++i) {\n      // If the old content is exhausted, create a new node.\n      if (i >= oldCopy.length) {\n        createDOMNode(newContent[i], host);\n        continue;\n      }\n\n      // Lookup the old and new virtual nodes.\n      let oldVNode = oldCopy[i];\n      let newVNode = newContent[i];\n\n      // If both elements are identical, there is nothing to do.\n      if (oldVNode === newVNode) {\n        currElem = currElem!.nextSibling;\n        continue;\n      }\n\n      // Handle the simplest case of in-place text update first.\n      if (oldVNode.type === 'text' && newVNode.type === 'text') {\n        // Avoid spurious updates for performance.\n        if (currElem!.textContent !== newVNode.content) {\n          currElem!.textContent = newVNode.content;\n        }\n        currElem = currElem!.nextSibling;\n        continue;\n      }\n\n      // If the old or new node is a text node, the other node is now\n      // known to be an element node, so create and insert a new node.\n      if (oldVNode.type === 'text' || newVNode.type === 'text') {\n        ArrayExt.insert(oldCopy, i, newVNode);\n        createDOMNode(newVNode, host, currElem);\n        continue;\n      }\n\n      // If the old XOR new node has a custom renderer,\n      // create and insert a new node.\n      if (!oldVNode.renderer != !newVNode.renderer) {\n        ArrayExt.insert(oldCopy, i, newVNode);\n        createDOMNode(newVNode, host, currElem);\n        continue;\n      }\n\n      // At this point, both nodes are known to be element nodes.\n\n      // If the new elem is keyed, move an old keyed elem to the proper\n      // location before proceeding with the diff. The search can start\n      // at the current index, since the unmatched old keyed elems are\n      // pushed forward in the old copy array.\n      let newKey = newVNode.attrs.key;\n      if (newKey && newKey in oldKeyed) {\n        let pair = oldKeyed[newKey];\n        if (pair.vNode !== oldVNode) {\n          ArrayExt.move(oldCopy, oldCopy.indexOf(pair.vNode, i + 1), i);\n          host.insertBefore(pair.element, currElem);\n          oldVNode = pair.vNode;\n          currElem = pair.element;\n        }\n      }\n\n      // If both elements are identical, there is nothing to do.\n      if (oldVNode === newVNode) {\n        currElem = currElem!.nextSibling;\n        continue;\n      }\n\n      // If the old elem is keyed and does not match the new elem key,\n      // create a new node. This is necessary since the old keyed elem\n      // may be matched at a later point in the diff.\n      let oldKey = oldVNode.attrs.key;\n      if (oldKey && oldKey !== newKey) {\n        ArrayExt.insert(oldCopy, i, newVNode);\n        createDOMNode(newVNode, host, currElem);\n        continue;\n      }\n\n      // If the tags are different, create a new node.\n      if (oldVNode.tag !== newVNode.tag) {\n        ArrayExt.insert(oldCopy, i, newVNode);\n        createDOMNode(newVNode, host, currElem);\n        continue;\n      }\n\n      // At this point, the element can be updated in-place.\n\n      // Update the element attributes.\n      updateAttrs(currElem as HTMLElement, oldVNode.attrs, newVNode.attrs);\n\n      // Update the element content.\n      if (newVNode.renderer) {\n        newVNode.renderer.render(currElem as HTMLElement, {\n          attrs: newVNode.attrs,\n          children: newVNode.children\n        });\n      } else {\n        updateContent(\n          currElem as HTMLElement,\n          oldVNode.children,\n          newVNode.children\n        );\n      }\n\n      // Step to the next sibling element.\n      currElem = currElem!.nextSibling;\n    }\n\n    // Cleanup stale DOM\n    removeContent(host, oldCopy, newCount, true);\n  }\n\n  /**\n   * Handle cleanup of stale vdom and its associated DOM. The host node is\n   * traversed recursively (in depth-first order), and any explicit cleanup\n   * required by a child node is carried out when it is visited (eg if a node\n   * has a custom renderer, the renderer.unrender function will be called).\n   * Once the subtree beneath each child of host has been completely visited,\n   * that child will be removed via a call to host.removeChild.\n   */\n  function removeContent(\n    host: HTMLElement,\n    oldContent: ReadonlyArray<VirtualNode>,\n    newCount: number,\n    _sentinel: boolean\n  ) {\n    // Dispose of the old nodes pushed to the end of the host.\n    for (let i = oldContent.length - 1; i >= newCount; --i) {\n      const oldNode = oldContent[i];\n      const child = (\n        _sentinel ? host.lastChild : host.childNodes[i]\n      ) as HTMLElement;\n\n      // recursively clean up host children\n      if (oldNode.type === 'text') {\n        // pass\n      } else if (oldNode.renderer && oldNode.renderer.unrender) {\n        oldNode.renderer.unrender(child!, {\n          attrs: oldNode.attrs,\n          children: oldNode.children\n        });\n      } else {\n        removeContent(child!, oldNode.children, 0, false);\n      }\n\n      if (_sentinel) {\n        host.removeChild(child!);\n      }\n    }\n  }\n\n  /**\n   * A set of special-cased attribute names.\n   */\n  const specialAttrs = {\n    key: true,\n    className: true,\n    htmlFor: true,\n    dataset: true,\n    style: true\n  };\n\n  /**\n   * Add element attributes to a newly created HTML element.\n   */\n  function addAttrs(element: HTMLElement, attrs: ElementAttrs): void {\n    // Add the inline event listeners and node attributes.\n    for (let name in attrs) {\n      if (name in specialAttrs) {\n        continue;\n      }\n      if (name.substr(0, 2) === 'on') {\n        (element as any)[name] = (attrs as any)[name];\n      } else {\n        element.setAttribute(name, (attrs as any)[name]);\n      }\n    }\n\n    // Add the element `class` attribute.\n    if (attrs.className !== undefined) {\n      element.setAttribute('class', attrs.className);\n    }\n\n    // Add the element `for` attribute.\n    if (attrs.htmlFor !== undefined) {\n      element.setAttribute('for', attrs.htmlFor);\n    }\n\n    // Add the dataset values.\n    if (attrs.dataset) {\n      addDataset(element, attrs.dataset);\n    }\n\n    // Add the inline styles.\n    if (attrs.style) {\n      addStyle(element, attrs.style);\n    }\n  }\n\n  /**\n   * Update the element attributes of an HTML element.\n   */\n  function updateAttrs(\n    element: HTMLElement,\n    oldAttrs: ElementAttrs,\n    newAttrs: ElementAttrs\n  ): void {\n    // Do nothing if the attrs are the same object.\n    if (oldAttrs === newAttrs) {\n      return;\n    }\n\n    // Setup the strongly typed loop variable.\n    let name: keyof ElementAttrs;\n\n    // Remove attributes and listeners which no longer exist.\n    for (name in oldAttrs) {\n      if (name in specialAttrs || name in newAttrs) {\n        continue;\n      }\n      if (name.substr(0, 2) === 'on') {\n        (element as any)[name] = null;\n      } else {\n        element.removeAttribute(name);\n      }\n    }\n\n    // Add and update new and existing attributes and listeners.\n    for (name in newAttrs) {\n      if (name in specialAttrs || oldAttrs[name] === newAttrs[name]) {\n        continue;\n      }\n      if (name.substr(0, 2) === 'on') {\n        (element as any)[name] = (newAttrs as any)[name];\n      } else {\n        element.setAttribute(name, (newAttrs as any)[name]);\n      }\n    }\n\n    // Update the element `class` attribute.\n    if (oldAttrs.className !== newAttrs.className) {\n      if (newAttrs.className !== undefined) {\n        element.setAttribute('class', newAttrs.className);\n      } else {\n        element.removeAttribute('class');\n      }\n    }\n\n    // Add the element `for` attribute.\n    if (oldAttrs.htmlFor !== newAttrs.htmlFor) {\n      if (newAttrs.htmlFor !== undefined) {\n        element.setAttribute('for', newAttrs.htmlFor);\n      } else {\n        element.removeAttribute('for');\n      }\n    }\n\n    // Update the dataset values.\n    if (oldAttrs.dataset !== newAttrs.dataset) {\n      updateDataset(element, oldAttrs.dataset || {}, newAttrs.dataset || {});\n    }\n\n    // Update the inline styles.\n    if (oldAttrs.style !== newAttrs.style) {\n      updateStyle(element, oldAttrs.style || {}, newAttrs.style || {});\n    }\n  }\n\n  /**\n   * Add dataset values to a newly created HTML element.\n   */\n  function addDataset(element: HTMLElement, dataset: ElementDataset): void {\n    for (let name in dataset) {\n      element.setAttribute(`data-${name}`, dataset[name]);\n    }\n  }\n\n  /**\n   * Update the dataset values of an HTML element.\n   */\n  function updateDataset(\n    element: HTMLElement,\n    oldDataset: ElementDataset,\n    newDataset: ElementDataset\n  ): void {\n    for (let name in oldDataset) {\n      if (!(name in newDataset)) {\n        element.removeAttribute(`data-${name}`);\n      }\n    }\n    for (let name in newDataset) {\n      if (oldDataset[name] !== newDataset[name]) {\n        element.setAttribute(`data-${name}`, newDataset[name]);\n      }\n    }\n  }\n\n  /**\n   * Add inline style values to a newly created HTML element.\n   */\n  function addStyle(element: HTMLElement, style: ElementInlineStyle): void {\n    let elemStyle = element.style;\n    let name: keyof ElementInlineStyle;\n    for (name in style) {\n      (elemStyle as any)[name] = style[name];\n    }\n  }\n\n  /**\n   * Update the inline style values of an HTML element.\n   */\n  function updateStyle(\n    element: HTMLElement,\n    oldStyle: ElementInlineStyle,\n    newStyle: ElementInlineStyle\n  ): void {\n    let elemStyle = element.style;\n    let name: keyof ElementInlineStyle;\n    for (name in oldStyle) {\n      if (!(name in newStyle)) {\n        (elemStyle as any)[name] = '';\n      }\n    }\n    for (name in newStyle) {\n      if (oldStyle[name] !== newStyle[name]) {\n        (elemStyle as any)[name] = newStyle[name];\n      }\n    }\n  }\n\n  /**\n   * A mapping of string key to pair of element and rendered node.\n   */\n  type KeyMap = {\n    [key: string]: { vNode: VirtualElement; element: HTMLElement };\n  };\n\n  /**\n   * Collect a mapping of keyed elements for the host content.\n   */\n  function collectKeys(\n    host: HTMLElement,\n    content: ReadonlyArray<VirtualNode>\n  ): KeyMap {\n    let node = host.firstChild;\n    let keyMap: KeyMap = Object.create(null);\n    for (let vNode of content) {\n      if (vNode.type === 'element' && vNode.attrs.key) {\n        keyMap[vNode.attrs.key] = { vNode, element: node as HTMLElement };\n      }\n      node = node!.nextSibling;\n    }\n    return keyMap;\n  }\n}\n"],"mappings":"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"}